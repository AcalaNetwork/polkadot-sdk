// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_origin_restriction`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-03-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `toaster1`, CPU: `AMD Ryzen Threadripper 7980X 64-Cores`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// /home/guillaume/frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/people-rococo-runtime/people_rococo_runtime.compact.compressed.wasm
// --pallet
// pallet_origin_restriction
// --extrinsic
// *
// --genesis-builder
// none
// --output
// .

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_origin_restriction`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_origin_restriction::WeightInfo for WeightInfo<T> {
	/// Storage: `OriginRestriction::Usages` (r:1 w:1)
	/// Proof: `OriginRestriction::Usages` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	fn clean_usage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `50`
		//  Estimated: `3534`
		// Minimum execution time: 5_769_000 picoseconds.
		Weight::from_parts(5_919_000, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `OriginRestriction::Usages` (r:1 w:1)
	/// Proof: `OriginRestriction::Usages` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	fn restrict_origin_tx_ext() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3534`
		// Minimum execution time: 3_165_000 picoseconds.
		Weight::from_parts(3_245_000, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
