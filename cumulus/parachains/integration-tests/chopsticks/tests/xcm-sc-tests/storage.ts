import {readFileSync} from "fs";
import {getContract, parseAbi} from "viem";
import {assert, walletClient} from "./utils";

type Calldata = `0x${string}`;

const XcmExecuteAbi = parseAbi(["constructor()"]);
const hash = await walletClient.deployContract({
    abi: XcmExecuteAbi,
    bytecode: `0x${Buffer.from(readFileSync("pvm/XcmExecute.polkavm")).toString("hex")}`,
});
const deployReceipt = await walletClient.waitForTransactionReceipt({hash});
const rustContractAddress = deployReceipt.contractAddress;
console.log("Rust Contract deployed:", rustContractAddress); // 0xc01ee7f10ea4af4673cfff62710e1d7792aba8f3
assert(rustContractAddress, "Contract address should be set");

const storageContractAbi = [
	{
		inputs: [],
		name: "retrieve",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256",
			},
		],
		stateMutability: "view",
		type: "function",
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "num",
				type: "uint256",
			},
		],
		name: "store",
		outputs: [],
		stateMutability: "nonpayable",
		type: "function",
	},
];
const storageContractHash = await walletClient.deployContract({
	abi: storageContractAbi,
	bytecode:
		"0x50564d0000f104000000000000010700c14000c0004004808f08000000000e0000001c0000002a0000003500000040000000520000005d00000063616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a656765745f73746f726167657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e73666572726564051102838c0463616c6c8393066465706c6f790684320f02839c5d0076007b009a00040134014a015c0180018402bb0214036d0393039b0364798b7a103307520a41330a000001ac8a39c8980883871f8477e054370000010a330732003908000002ae78143d0700000264783307200002c8870732003307200002c88707320032009511f07b10087b1584750133073308501002a73e070800020a02013e071000023b0520000351050750100409501006e6009511c07b10387b15307b16289515408411e064163307403308205010086bff5107b3003308080002210358000221035000022103480002140700000000000000807b68103e076000029517e08477e07b67186471491718491710491708490783770a0701826a1882a71082a81882a90882aad49808d4a707d4870752074b33078000330850100a01ff510749826710837780007b6718330833090a01390814000251080d330740000383770a050133078000330850100cd1fe510719330782681833090a04013307330850100ebbfe5207040081681033070133093300100a0401951120ff7b10d8007b15d0007b16c8009515e0008411e0641633074033082050101285fe5107970133090800023308100002210358000221035000027b68383908100002140700000000000000803e076000027b69302103480002541803540183674033080a010181675c51471d36576006015247c1ce642e3c019517e08477e07b67286471491718491710491708490783770a0701826a2882a71082a81882a90882aad49808d4a707d48707520702018267388177531704f9004916784916704916684916609517e08477e064714917184917104917084907647a7b67389517f88477e064714917184917104917084907000183aa837b8368603309ff33070a038267388278187b68188278107b68208278087b682882777b67383307800033082050101481fd510793008267186f778268206f888269286f99826a386faa826b307bba98007bb990007bb888007bb78000330780003308205010164afd51075c8267308378800033092033070a04019517e08477e07b67286471491718491710491708490783770a0701826a2882a71082a81882a90882aad49808d4a707d4870752070c82673881775517241133073308501018f1fc52076600836780003308040a01826780008268880082699000826a98004926b8004926b0004926a8004926a000951be084bbe064b17bba187bb9107bb8087bb783ba8368a0003309ff330b2033070a063307330850101a98fc5107aa816830330733090a040181683033070133090a04330733001c28c1fc330750101cbcfc33070150101eb4fc00a58424092a2414524825a5223484444892a424440821049090a424d5242949a29044ea9050a390522b64521a1111290911420809018484909a80802425a9264949228524494a52494a129554922429911029a5948888484822354949aa495292a4a8909122222222929254245521a9265552480800",
});
const deployReceiptStorage = await walletClient.waitForTransactionReceipt({
	hash: storageContractHash,
});
const storageContractAddress = deployReceiptStorage.contractAddress;
console.log("Storage Contract deployed:", storageContractAddress); // 0x3ed62137c5db927cb137c26455969116bf0c23cb
assert(rustContractAddress, "Contract address should be set");

const storageContract = getContract({
    address: storageContractAddress!,
    abi: storageContractAbi,
    client: walletClient,
});


const rawXcmBytes: Calldata = `0x050406000031013c01${storageContractAddress!.slice(2)}000700fa057f03c2270900070008005502906057361d0000000000000000000000000000000000000000000000000000000000000001`;
console.log("Raw XCM Bytes:", rawXcmBytes);

console.log("Storage Contract retrieve:", await storageContract.read.retrieve());

const txHash = await walletClient.sendTransaction({
    to: rustContractAddress,
    data: rawXcmBytes,
	gas: 89385103321800n
});

const txReceipt = await walletClient.waitForTransactionReceipt({hash: txHash});
console.log("Gas used:", Number(txReceipt.gasUsed));

setTimeout(async () => {
	console.log("Storage Contract retrieve:", await storageContract.read.retrieve());
}, 7000);