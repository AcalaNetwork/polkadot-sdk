name: "Zombienet-sdk test"
inputs:
  build-id:
    description: ""
    required: true
  ref-slug:
    description:
    required: true
  test:
    description: "test filter to pass to nextest (e.g: functional::spam_statement_distribution_requests::spam_statement_distribution_requests_test)"
    required: true
  prefix:
    description: "Archive prefix for tests files (e.g polkadot, cumulus or substrate)"
    required: true
  gh-token:
    description: "GITHUB_TOKEN to use for downloading artifacts"
    required: true



runs:
  using: "composite"
  steps:
    - name: k8s_auth
      shell: bash
      run: |
        . /home/nonroot/zombie-net/scripts/ci/run-test-local-env-manager.sh
        k8s_auth

    - name: common_vars
      shell: bash
      env:
        TEST_NAME: ${{ inputs.test }}
        PREFIX: ${{ inputs.prefix }}
      run: |
        echo "Vars"
        echo "ZOMBIENET_INTEGRATION_TEST_IMAGE: $ZOMBIENET_INTEGRATION_TEST_IMAGE"
        echo "ZOMBIE_PROVIDER": $ZOMBIE_PROVIDER
        echo "POLKADOT_IMAGE: $POLKADOT_IMAGE"
        echo "CUMULUS_IMAGE: $CUMULUS_IMAGE"
        echo "COL_IMAGE: $COL_IMAGE"
        echo "MALUS_IMAGE: $MALUS_IMAGE"
        echo "RUN_IN_CI: $RUN_IN_CI"
        echo "Inputs"
        echo "test: $TEST_NAME"
        echo "prefix: $PREFIX"

    - uses: actions/download-artifact@v4.1.8
      with:
        name: prepare-${{ inputs.prefix }}-zombienet-artifacts-${{ inputs.ref-slug }}
        github-token: ${{ inputs.gh-token }}
        run-id: ${{ inputs.build-id }}

    - name: tar
      shell: bash
      run: tar -xvf artifacts.tar

    - name: zombie_test
      shell: bash
      env:
        # zombienet-sdk expects RUN_IN_CI to be set when running in CI
        RUN_IN_CI: 1
        # don't retry sdk tests
        NEXTEST_RETRIES: 0
        TEST_NAME: ${{ inputs.test }}
        PREFIX: ${{ inputs.prefix }}
      run: |
          ls -ltr ./artifacts
          cargo nextest run --archive-file ./artifacts/${PREFIX}-zombienet-tests.tar.zst --no-capture -- ${TEST_NAME}

    - name: process_logs
      shell: bash
      run: |
        BASE_DIR=$(ls -dt /tmp/zombie-* | head -1)
        ZOMBIE_JSON="$BASE_DIR/zombie.json"

        # Extract namespace
        NS=$(jq -r '.ns' "$ZOMBIE_JSON")

        # Make sure target directory exists
        TARGET_DIR="$BASE_DIR/logs"
        mkdir -p "$TARGET_DIR"

        LOKI_URL_TEMPLATE='https://grafana.teleport.parity.io/explore?orgId=1&left=%7B%22datasource%22:%22PCF9DACBDF30E12B3%22,%22queries%22:%5B%7B%22refId%22:%22A%22,%22datasource%22:%7B%22type%22:%22loki%22,%22uid%22:%22PCF9DACBDF30E12B3%22%7D,%22editorMode%22:%22code%22,%22expr%22:%22%7Bnamespace%3D%5C%22{{namespace}}%5C%22,pod%3D%5C%22{{podName}}%5C%22%7D%22,%22queryType%22:%22range%22%7D%5D,%22range%22:%7B%22from%22:%22{{from}}%22,%22to%22:%22{{to}}%22%7D%7D'

        # Extract all node name from relay and parachains
        jq -r '[.relay.nodes[].name] + [.parachains[][] .collators[].name] | .[]' "$ZOMBIE_JSON" | while read -r NAME; do
          if [[ "$ZOMBIE_PROVIDER" == "k8s" ]]; then
            # Fetching logs from k8s
            kubectl -n "$NS" logs "$NAME" > "$TARGET_DIR/$NAME.log"

            # Replace placeholders
            URL=${LOKI_URL_TEMPLATE//\{\{namespace\}\}/$NS}
            URL=${URL//\{\{podName\}\}/$NAME}
            URL=${URL//\{\{from\}\}/$FROM}
            URL=${URL//\{\{to\}\}/$TO}

            echo "$NAME: $URL"
          else
            cp "$BASE_DIR/$NAME/$NAME.log" "$TARGET_DIR/$NAME.log"
          fi

        done

    - name: upload_logs
      uses: actions/upload-artifact@v4
      if: ${{ ! cancelled() }}
      with:
        name: zombienet-logs-${{ github.job }}-${{ github.sha }}
        path: |
          /tmp/zombie*/logs/*

