# GHA for test-linux-stable-int, test-linux-stable, test-linux-stable-oldkernel
name: tests linux stable

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  merge_group:
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    permissions:
      pull-requests: read
    uses: ./.github/workflows/check-changed-files.yml

  set-image:
    # GitHub Actions allows using 'env' in a container context.
    # However, env variables don't work for forks: https://github.com/orgs/community/discussions/44322
    # This workaround sets the container image for each job using 'set-image' job output.
    needs: changes
    if: ${{ needs.changes.outputs.rust }}
    runs-on: ubuntu-latest
    outputs:
      IMAGE: ${{ steps.set_image.outputs.IMAGE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: set_image
        run: cat .github/env >> $GITHUB_OUTPUT

  test-linux-stable-int:
    needs: [set-image, changes]
    if: ${{ needs.changes.outputs.rust }}
    runs-on: arc-runners-polkadot-sdk-beefy
    timeout-minutes: 60
    container:
      image: ${{ needs.set-image.outputs.IMAGE }}
    env:
      RUSTFLAGS: "-C debug-assertions -D warnings"
      RUST_BACKTRACE: 1
      WASM_BUILD_NO_COLOR: 1
      WASM_BUILD_RUSTFLAGS: "-C debug-assertions -D warnings"
      # Ensure we run the UI tests.
      RUN_UI_TESTS: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: script
        run: WASM_BUILD_NO_COLOR=1 time forklift cargo test -p staging-node-cli --release --locked -- --ignored

  # https://github.com/paritytech/ci_cd/issues/864
  test-linux-stable-runtime-benchmarks:
    needs: [set-image, changes]
    if: ${{ needs.changes.outputs.rust }}
    runs-on: arc-runners-polkadot-sdk-beefy
    timeout-minutes: 60
    container:
      image: ${{ needs.set-image.outputs.IMAGE }}
    env:
      RUST_TOOLCHAIN: stable
      # Enable debug assertions since we are running optimized builds for testing
      # but still want to have debug assertions.
      RUSTFLAGS: "-Cdebug-assertions=y -Dwarnings"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: script
        run: time forklift cargo nextest run --workspace --features runtime-benchmarks benchmark --locked --cargo-profile testnet

  #
  test-linux-stable:
    needs: [set-image, changes]
    runs-on: arc-runners-polkadot-sdk-beefy
    timeout-minutes: 120
    container:
      image: ${{ needs.set-image.outputs.IMAGE }}
    env:
      RUST_TOOLCHAIN: stable
      # Enable debug assertions since we are running optimized builds for testing
      # but still want to have debug assertions.
      RUSTFLAGS: "-Cdebug-assertions=y -Dwarnings -Cinstrument-coverage"
      #LLVM_PROFILE_FILE: "target/coverage/cargo-test-${{ matrix.ci_node_index }}-%p-%m.profraw"
      LLVM_PROFILE_FILE: "/__w/polkadot-sdk/polkadot-sdk/target/coverage/cargo-test-${{ matrix.ci_node_index }}-%p-%m.profraw"
    strategy: 
      fail-fast: false     
      matrix:
        ci_node_total: [1]
        ci_node_index: [1]      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: update forklift
        run: curl -o .forklift/forklift -L https://github.com/paritytech/forklift/releases/download/0.13.1-alpha/forklift_0.13.1-alpha_linux_amd64
      - run: chmod +x .forklift/forklift && .forklift/forklift version
      
      - run: rustup component add llvm-tools-preview
      - run: cargo install cargo-llvm-cov

      - run: mkdir -p target/coverage/result
      - name: script
        run: >
          time cargo llvm-cov --release nextest
          --no-report
          -p polkadot
          --locked --no-fail-fast
          --partition count:${{ matrix.ci_node_index }}/100
      - run: ls -al target/coverage
      - run: ls -al /__w/polkadot-sdk/polkadot-sdk/target
      - run: ls -al /__w/polkadot-sdk/polkadot-sdk/target/llvm-cov-target
      - name: generate report
        run: cargo llvm-cov report --release --codecov --output-path coverage.info
      - run: ls -al
      #- name: upload report
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: coverage-report-${{ matrix.ci_node_index }}.lcov
      #    path: target/coverage/result/report-${{ matrix.ci_node_index }}.lcov
#
  #upload-reports:
  #  needs: [test-linux-stable]
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Download artifacts
  #      uses: actions/download-artifact@v4
  #      with:
  #        path: reports
  #        pattern: coverage-report-*
  #        merge-multiple: true    
  #    - run: ls -al reports/      
  #    - name: Upload to Codecov
  #      uses: codecov/codecov-action@v2   
  #      with:
  #        token: ${{ secrets.CODECOV_TOKEN }}
  #        verbose: true 
  #        directory: reports