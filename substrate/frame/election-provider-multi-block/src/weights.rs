
//! Autogenerated weights for `pallet_epm_core`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-02, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `gpestanas-MBP.lan`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// /Users/gpestana/cargo_target/debug/staking-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet-epm-core
// --extrinsic
// *
// --steps
// 2
// --repeat
// 1
// --output
// core_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn create_voters_snapshot_paged(t: u32) -> Weight;
	fn create_targets_snapshot_paged(v: u32) -> Weight;
}

/// Weight functions for `pallet_epm_core`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Staking::CounterForValidators` (r:1 w:0)
	/// Proof: `Staking::CounterForValidators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Staking::TargetSnapshotStatus` (r:1 w:1)
	/// Proof: `Staking::TargetSnapshotStatus` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Validators` (r:1001 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[512, 2048]`.
	fn create_targets_snapshot_paged(_t: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `17412 + t * (14 ±0)`
		//  Estimated: `2523510`
		// Minimum execution time: 46_648_000_000 picoseconds.
		Weight::from_parts(93_279_000_000, 0)
			.saturating_add(Weight::from_parts(0, 2523510))
			.saturating_add(T::DbWeight::get().reads(1003))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VoterList::CounterForListNodes` (r:1 w:0)
	/// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Staking::VoterSnapshotStatus` (r:1 w:1)
	/// Proof: `Staking::VoterSnapshotStatus` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	/// Storage: `VoterList::ListBags` (r:200 w:0)
	/// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
	/// Storage: `VoterList::ListNodes` (r:2049 w:0)
	/// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:2048 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:2048 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1000 w:0)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Validators` (r:1000 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Staking::MinimumActiveStake` (r:0 w:1)
	/// Proof: `Staking::MinimumActiveStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[32, 1024]`.
	fn create_voters_snapshot_paged(_v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `68941 + v * (1078 ±0)`
		//  Estimated: `7304158`
		// Minimum execution time: 14_424_000_000 picoseconds.
		Weight::from_parts(469_669_000_000, 0)
			.saturating_add(Weight::from_parts(0, 7304158))
			.saturating_add(T::DbWeight::get().reads(8347))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}

impl WeightInfo for () {
	fn create_voters_snapshot_paged(_v: u32) -> Weight {
	    Default::default()
	}

	fn create_targets_snapshot_paged(_t: u32) -> Weight {
		Default::default()
	}
}
