// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_revive`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-08-21, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `948f494ac939`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/kitchensink-runtime/kitchensink_runtime.wasm
// --pallet=pallet_revive
// --header=/__w/polkadot-sdk/polkadot-sdk/substrate/HEADER-APACHE2
// --output=/__w/polkadot-sdk/polkadot-sdk/substrate/frame/revive/src/weights.rs
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=substrate/.maintain/frame-weight-template.hbs
// --no-storage-info
// --no-min-squares
// --no-median-slopes
// --exclude-pallets=pallet_xcm,pallet_xcm_benchmarks::fungible,pallet_xcm_benchmarks::generic,pallet_nomination_pools,pallet_remark,pallet_transaction_storage

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_revive`.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn call_with_pvm_code_per_byte(c: u32, ) -> Weight;
	fn call_with_evm_code_per_byte(c: u32, ) -> Weight;
	fn basic_block_compilation(b: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight;
	fn eth_instantiate_with_code(c: u32, i: u32, d: u32, ) -> Weight;
	fn instantiate(i: u32, ) -> Weight;
	fn call() -> Weight;
	fn eth_call(d: u32, ) -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn map_account() -> Weight;
	fn unmap_account() -> Weight;
	fn dispatch_as_fallback_account() -> Weight;
	fn noop_host_fn(r: u32, ) -> Weight;
	fn seal_caller() -> Weight;
	fn seal_origin() -> Weight;
	fn to_account_id() -> Weight;
	fn seal_code_hash() -> Weight;
	fn seal_own_code_hash() -> Weight;
	fn seal_code_size() -> Weight;
	fn seal_caller_is_origin() -> Weight;
	fn seal_caller_is_root() -> Weight;
	fn seal_address() -> Weight;
	fn seal_weight_left() -> Weight;
	fn seal_ref_time_left() -> Weight;
	fn seal_balance() -> Weight;
	fn seal_balance_of() -> Weight;
	fn seal_get_immutable_data(n: u32, ) -> Weight;
	fn seal_set_immutable_data(n: u32, ) -> Weight;
	fn seal_value_transferred() -> Weight;
	fn seal_minimum_balance() -> Weight;
	fn seal_return_data_size() -> Weight;
	fn seal_call_data_size() -> Weight;
	fn seal_gas_limit() -> Weight;
	fn seal_gas_price() -> Weight;
	fn seal_base_fee() -> Weight;
	fn seal_block_number() -> Weight;
	fn seal_block_author() -> Weight;
	fn seal_block_hash() -> Weight;
	fn seal_now() -> Weight;
	fn seal_weight_to_fee() -> Weight;
	fn seal_copy_to_contract(n: u32, ) -> Weight;
	fn seal_call_data_load() -> Weight;
	fn seal_call_data_copy(n: u32, ) -> Weight;
	fn seal_return(n: u32, ) -> Weight;
	fn seal_terminate(n:u32) -> Weight;
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight;
	fn get_storage_empty() -> Weight;
	fn get_storage_full() -> Weight;
	fn set_storage_empty() -> Weight;
	fn set_storage_full() -> Weight;
	fn seal_set_storage(n: u32, o: u32, ) -> Weight;
	fn seal_clear_storage(n: u32, ) -> Weight;
	fn seal_get_storage(n: u32, ) -> Weight;
	fn seal_contains_storage(n: u32, ) -> Weight;
	fn seal_take_storage(n: u32, ) -> Weight;
	fn set_transient_storage_empty() -> Weight;
	fn set_transient_storage_full() -> Weight;
	fn get_transient_storage_empty() -> Weight;
	fn get_transient_storage_full() -> Weight;
	fn rollback_transient_storage() -> Weight;
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight;
	fn seal_clear_transient_storage(n: u32, ) -> Weight;
	fn seal_get_transient_storage(n: u32, ) -> Weight;
	fn seal_contains_transient_storage(n: u32, ) -> Weight;
	fn seal_take_transient_storage(n: u32, ) -> Weight;
	fn seal_call(t: u32, d: u32, i: u32, ) -> Weight;
	fn seal_call_precompile(d: u32, i: u32, ) -> Weight;
	fn seal_delegate_call() -> Weight;
	fn seal_instantiate(t: u32, d: u32, i: u32, ) -> Weight;
	fn sha2_256(n: u32, ) -> Weight;
	fn identity(n: u32, ) -> Weight;
	fn ripemd_160(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(n: u32, ) -> Weight;
	fn hash_blake2_256(n: u32, ) -> Weight;
	fn hash_blake2_128(n: u32, ) -> Weight;
	fn seal_sr25519_verify(n: u32, ) -> Weight;
	fn ecdsa_recover() -> Weight;
	fn bn128_add() -> Weight;
	fn bn128_mul() -> Weight;
	fn bn128_pairing(n: u32, ) -> Weight;
	fn blake2f(n: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address() -> Weight;
	fn seal_set_code_hash(n: u32) -> Weight;
	fn evm_opcode(r: u32, ) -> Weight;
	fn instr(r: u32, ) -> Weight;
	fn instr_empty_loop(r: u32, ) -> Weight;
	fn v1_migration_step() -> Weight;
	fn v2_migration_step() -> Weight;
}

/// Weights for `pallet_revive` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `1632`
		// Minimum execution time: 3_150_000 picoseconds.
		Weight::from_parts(3_421_000, 1632)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458 + k * (69 ±0)`
		//  Estimated: `448 + k * (70 ±0)`
		// Minimum execution time: 14_380_000 picoseconds.
		Weight::from_parts(14_911_000, 448)
			// Standard Error: 1_088
			.saturating_add(Weight::from_parts(1_199_036, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	fn call_with_pvm_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1172 + c * (1 ±0)`
		//  Estimated: `7107 + c * (1 ±0)`
		// Minimum execution time: 86_173_000 picoseconds.
		Weight::from_parts(120_432_125, 7107)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(1_435, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[1, 102400]`.
	fn call_with_evm_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1104`
		//  Estimated: `7046`
		// Minimum execution time: 80_755_000 picoseconds.
		Weight::from_parts(85_415_387, 7046)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(33, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `b` is `[0, 1]`.
	fn basic_block_compilation(_b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4516`
		//  Estimated: `10456`
		// Minimum execution time: 123_589_000 picoseconds.
		Weight::from_parts(127_489_869, 10456)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	/// The range of component `i` is `[0, 131072]`.
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1108`
		//  Estimated: `7041`
		// Minimum execution time: 754_650_000 picoseconds.
		Weight::from_parts(758_926_000, 7041)
			// Standard Error: 85
			.saturating_add(Weight::from_parts(15_657, 0).saturating_mul(c.into()))
			// Standard Error: 67
			.saturating_add(Weight::from_parts(1_573, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	/// The range of component `i` is `[0, 131072]`.
	/// The range of component `d` is `[0, 1]`.
	fn eth_instantiate_with_code(c: u32, i: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1122`
		//  Estimated: `7062 + d * (2475 ±0)`
		// Minimum execution time: 278_747_000 picoseconds.
		Weight::from_parts(145_795_450, 7062)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(14_966, 0).saturating_mul(c.into()))
			// Standard Error: 13
			.saturating_add(Weight::from_parts(542, 0).saturating_mul(i.into()))
			// Standard Error: 1_133_623
			.saturating_add(Weight::from_parts(41_772_022, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(d.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// The range of component `i` is `[0, 131072]`.
	fn instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1913`
		//  Estimated: `5338`
		// Minimum execution time: 171_706_000 picoseconds.
		Weight::from_parts(177_711_925, 5338)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(4_170, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1794`
		//  Estimated: `7734`
		// Minimum execution time: 86_797_000 picoseconds.
		Weight::from_parts(90_276_000, 7734)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	fn eth_call(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1794`
		//  Estimated: `7734 + d * (2475 ±0)`
		// Minimum execution time: 86_087_000 picoseconds.
		Weight::from_parts(89_671_759, 7734)
			// Standard Error: 300_888
			.saturating_add(Weight::from_parts(26_362_240, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(d.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `3970`
		// Minimum execution time: 57_265_000 picoseconds.
		Weight::from_parts(38_840_872, 3970)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(14_420, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659`
		//  Estimated: `4124`
		// Minimum execution time: 47_571_000 picoseconds.
		Weight::from_parts(48_571_000, 4124)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `532`
		//  Estimated: `6472`
		// Minimum execution time: 20_565_000 picoseconds.
		Weight::from_parts(21_420_000, 6472)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	fn map_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `813`
		//  Estimated: `4278`
		// Minimum execution time: 58_321_000 picoseconds.
		Weight::from_parts(58_922_000, 4278)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:0 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn unmap_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `395`
		//  Estimated: `3860`
		// Minimum execution time: 43_929_000 picoseconds.
		Weight::from_parts(44_755_000, 3860)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SafeMode::EnteredUntil` (r:1 w:0)
	/// Proof: `SafeMode::EnteredUntil` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `TxPause::PausedCalls` (r:1 w:0)
	/// Proof: `TxPause::PausedCalls` (`max_values`: None, `max_size`: Some(532), added: 3007, mode: `Measured`)
	fn dispatch_as_fallback_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145`
		//  Estimated: `3610`
		// Minimum execution time: 12_925_000 picoseconds.
		Weight::from_parts(13_333_000, 3610)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_528_000 picoseconds.
		Weight::from_parts(8_699_408, 0)
			// Standard Error: 197
			.saturating_add(Weight::from_parts(182_534, 0).saturating_mul(r.into()))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 306_000 picoseconds.
		Weight::from_parts(375_000, 0)
	}
	fn seal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 288_000 picoseconds.
		Weight::from_parts(362_000, 0)
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn to_account_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `567`
		//  Estimated: `4032`
		// Minimum execution time: 7_364_000 picoseconds.
		Weight::from_parts(7_904_000, 4032)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `403`
		//  Estimated: `3868`
		// Minimum execution time: 9_050_000 picoseconds.
		Weight::from_parts(9_489_000, 3868)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn seal_own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 302_000 picoseconds.
		Weight::from_parts(337_000, 0)
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	fn seal_code_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `475`
		//  Estimated: `3940`
		// Minimum execution time: 12_570_000 picoseconds.
		Weight::from_parts(13_223_000, 3940)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	fn seal_caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 310_000 picoseconds.
		Weight::from_parts(364_000, 0)
	}
	fn seal_caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 259_000 picoseconds.
		Weight::from_parts(302_000, 0)
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(357_000, 0)
	}
	fn seal_weight_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 723_000 picoseconds.
		Weight::from_parts(797_000, 0)
	}
	fn seal_ref_time_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 268_000 picoseconds.
		Weight::from_parts(305_000, 0)
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `540`
		//  Estimated: `0`
		// Minimum execution time: 12_855_000 picoseconds.
		Weight::from_parts(13_194_000, 0)
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `791`
		//  Estimated: `4256`
		// Minimum execution time: 18_281_000 picoseconds.
		Weight::from_parts(19_051_000, 4256)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:1 w:0)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_get_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (1 ±0)`
		//  Estimated: `3736 + n * (1 ±0)`
		// Minimum execution time: 5_711_000 picoseconds.
		Weight::from_parts(6_613_746, 3736)
			// Standard Error: 7
			.saturating_add(Weight::from_parts(499, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_set_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_087_000 picoseconds.
		Weight::from_parts(2_316_148, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(493, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 267_000 picoseconds.
		Weight::from_parts(315_000, 0)
	}
	fn seal_minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 270_000 picoseconds.
		Weight::from_parts(313_000, 0)
	}
	fn seal_return_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 264_000 picoseconds.
		Weight::from_parts(324_000, 0)
	}
	fn seal_call_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 262_000 picoseconds.
		Weight::from_parts(309_000, 0)
	}
	fn seal_gas_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 531_000 picoseconds.
		Weight::from_parts(625_000, 0)
	}
	fn seal_gas_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 260_000 picoseconds.
		Weight::from_parts(311_000, 0)
	}
	fn seal_base_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 282_000 picoseconds.
		Weight::from_parts(312_000, 0)
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 261_000 picoseconds.
		Weight::from_parts(325_000, 0)
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn seal_block_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `1626`
		// Minimum execution time: 21_538_000 picoseconds.
		Weight::from_parts(22_409_000, 1626)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `Measured`)
	fn seal_block_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `3495`
		// Minimum execution time: 3_401_000 picoseconds.
		Weight::from_parts(3_673_000, 3495)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 300_000 picoseconds.
		Weight::from_parts(354_000, 0)
	}
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_680_000 picoseconds.
		Weight::from_parts(1_742_000, 0)
	}
	/// The range of component `n` is `[0, 1048572]`.
	fn seal_copy_to_contract(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 392_000 picoseconds.
		Weight::from_parts(262_995, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(202, 0).saturating_mul(n.into()))
	}
	fn seal_call_data_load() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 234_000 picoseconds.
		Weight::from_parts(291_000, 0)
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_call_data_copy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 267_000 picoseconds.
		Weight::from_parts(610_075, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(112, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 131072]`.
	fn seal_return(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 292_000 picoseconds.
		Weight::from_parts(466_044, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(200, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::DeletionQueue` (r:0 w:1)
	/// Proof: `Revive::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	fn seal_terminate(_u: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `583`
		//  Estimated: `4048`
		// Minimum execution time: 16_855_000 picoseconds.
		Weight::from_parts(17_325_000, 4048)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 416]`.
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_416_000 picoseconds.
		Weight::from_parts(4_382_711, 0)
			// Standard Error: 3_063
			.saturating_add(Weight::from_parts(257_304, 0).saturating_mul(t.into()))
			// Standard Error: 33
			.saturating_add(Weight::from_parts(1_239, 0).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `648`
		// Minimum execution time: 7_148_000 picoseconds.
		Weight::from_parts(7_616_000, 648)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10658`
		//  Estimated: `10658`
		// Minimum execution time: 41_435_000 picoseconds.
		Weight::from_parts(42_294_000, 10658)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `648`
		// Minimum execution time: 8_266_000 picoseconds.
		Weight::from_parts(8_704_000, 648)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10658`
		//  Estimated: `10658`
		// Minimum execution time: 43_187_000 picoseconds.
		Weight::from_parts(44_235_000, 10658)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + o * (1 ±0)`
		//  Estimated: `247 + o * (1 ±0)`
		// Minimum execution time: 8_740_000 picoseconds.
		Weight::from_parts(9_473_762, 247)
			// Standard Error: 60
			.saturating_add(Weight::from_parts(684, 0).saturating_mul(n.into()))
			// Standard Error: 60
			.saturating_add(Weight::from_parts(488, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_609_000 picoseconds.
		Weight::from_parts(9_456_962, 247)
			// Standard Error: 78
			.saturating_add(Weight::from_parts(882, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 7_777_000 picoseconds.
		Weight::from_parts(8_957_787, 247)
			// Standard Error: 85
			.saturating_add(Weight::from_parts(2_018, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 7_552_000 picoseconds.
		Weight::from_parts(8_333_059, 247)
			// Standard Error: 68
			.saturating_add(Weight::from_parts(1_086, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 9_262_000 picoseconds.
		Weight::from_parts(10_280_631, 247)
			// Standard Error: 84
			.saturating_add(Weight::from_parts(780, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_559_000 picoseconds.
		Weight::from_parts(1_678_000, 0)
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_939_000 picoseconds.
		Weight::from_parts(2_073_000, 0)
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_490_000 picoseconds.
		Weight::from_parts(1_582_000, 0)
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_679_000 picoseconds.
		Weight::from_parts(1_739_000, 0)
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_279_000 picoseconds.
		Weight::from_parts(1_339_000, 0)
	}
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_300_000 picoseconds.
		Weight::from_parts(2_536_575, 0)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(334, 0).saturating_mul(n.into()))
			// Standard Error: 17
			.saturating_add(Weight::from_parts(392, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_164_000 picoseconds.
		Weight::from_parts(2_555_863, 0)
			// Standard Error: 34
			.saturating_add(Weight::from_parts(226, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_870_000 picoseconds.
		Weight::from_parts(2_188_923, 0)
			// Standard Error: 27
			.saturating_add(Weight::from_parts(316, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_713_000 picoseconds.
		Weight::from_parts(2_013_249, 0)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(210, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_549_000 picoseconds.
		Weight::from_parts(2_811_411, 0)
			// Standard Error: 31
			.saturating_add(Weight::from_parts(61, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 1048576]`.
	fn seal_call(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1925`
		//  Estimated: `5390`
		// Minimum execution time: 88_918_000 picoseconds.
		Weight::from_parts(70_713_518, 5390)
			// Standard Error: 172_359
			.saturating_add(Weight::from_parts(18_545_016, 0).saturating_mul(t.into()))
			// Standard Error: 172_359
			.saturating_add(Weight::from_parts(24_817_484, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(2, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 130972]`.
	fn seal_call_precompile(d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `366 + d * (212 ±0)`
		//  Estimated: `2021 + d * (2021 ±0)`
		// Minimum execution time: 24_697_000 picoseconds.
		Weight::from_parts(12_092_184, 2021)
			// Standard Error: 60_308
			.saturating_add(Weight::from_parts(13_519_246, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(319, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2021).saturating_mul(d.into()))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1363`
		//  Estimated: `4828`
		// Minimum execution time: 32_134_000 picoseconds.
		Weight::from_parts(33_037_000, 4828)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 131072]`.
	fn seal_instantiate(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1413`
		//  Estimated: `4863 + d * (26 ±1) + t * (26 ±1)`
		// Minimum execution time: 153_561_000 picoseconds.
		Weight::from_parts(109_353_814, 4863)
			// Standard Error: 568_290
			.saturating_add(Weight::from_parts(21_328_059, 0).saturating_mul(t.into()))
			// Standard Error: 568_290
			.saturating_add(Weight::from_parts(29_078_265, 0).saturating_mul(d.into()))
			// Standard Error: 6
			.saturating_add(Weight::from_parts(3_922, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 26).saturating_mul(d.into()))
			.saturating_add(Weight::from_parts(0, 26).saturating_mul(t.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn sha2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_210_000 picoseconds.
		Weight::from_parts(6_742_356, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_262, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn identity(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 744_000 picoseconds.
		Weight::from_parts(726_223, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(112, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn ripemd_160(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_303_000 picoseconds.
		Weight::from_parts(5_014_415, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(3_746, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_keccak_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_191_000 picoseconds.
		Weight::from_parts(8_433_779, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(3_561, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn hash_blake2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_642_000 picoseconds.
		Weight::from_parts(16_588_050, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_403, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn hash_blake2_128(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_560_000 picoseconds.
		Weight::from_parts(11_627_209, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_418, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048321]`.
	fn seal_sr25519_verify(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 43_050_000 picoseconds.
		Weight::from_parts(78_880_483, 0)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(4_820, 0).saturating_mul(n.into()))
	}
	fn ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 46_308_000 picoseconds.
		Weight::from_parts(47_213_000, 0)
	}
	fn bn128_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_418_000 picoseconds.
		Weight::from_parts(15_454_000, 0)
	}
	fn bn128_mul() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 998_849_000 picoseconds.
		Weight::from_parts(1_007_812_000, 0)
	}
	/// The range of component `n` is `[0, 20]`.
	fn bn128_pairing(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 878_000 picoseconds.
		Weight::from_parts(4_894_017_610, 0)
			// Standard Error: 10_490_929
			.saturating_add(Weight::from_parts(5_933_404_461, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1200]`.
	fn blake2f(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 976_000 picoseconds.
		Weight::from_parts(1_204_210, 0)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(29_014, 0).saturating_mul(n.into()))
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_997_000 picoseconds.
		Weight::from_parts(13_136_000, 0)
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	fn seal_set_code_hash(_n: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `297`
		//  Estimated: `3762`
		// Minimum execution time: 12_778_000 picoseconds.
		Weight::from_parts(13_084_000, 3762)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn evm_opcode(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_130_000 picoseconds.
		Weight::from_parts(1_549_653, 0)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(2_365, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn instr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_557_000 picoseconds.
		Weight::from_parts(60_327_563, 0)
			// Standard Error: 1_035
			.saturating_add(Weight::from_parts(143_372, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 100000]`.
	fn instr_empty_loop(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_315_000 picoseconds.
		Weight::from_parts(7_548_170, 0)
			// Standard Error: 24
			.saturating_add(Weight::from_parts(72_139, 0).saturating_mul(r.into()))
	}
	/// Storage: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Proof: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Storage: `Revive::AccountInfoOf` (r:0 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn v1_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `6256`
		// Minimum execution time: 11_803_000 picoseconds.
		Weight::from_parts(12_358_000, 6256)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:2 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	fn v2_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245`
		//  Estimated: `6134`
		// Minimum execution time: 10_980_000 picoseconds.
		Weight::from_parts(11_452_000, 6134)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `1632`
		// Minimum execution time: 3_150_000 picoseconds.
		Weight::from_parts(3_421_000, 1632)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458 + k * (69 ±0)`
		//  Estimated: `448 + k * (70 ±0)`
		// Minimum execution time: 14_380_000 picoseconds.
		Weight::from_parts(14_911_000, 448)
			// Standard Error: 1_088
			.saturating_add(Weight::from_parts(1_199_036, 0).saturating_mul(k.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	fn call_with_pvm_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1172 + c * (1 ±0)`
		//  Estimated: `7107 + c * (1 ±0)`
		// Minimum execution time: 86_173_000 picoseconds.
		Weight::from_parts(120_432_125, 7107)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(1_435, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[1, 102400]`.
	fn call_with_evm_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1104`
		//  Estimated: `7046`
		// Minimum execution time: 80_755_000 picoseconds.
		Weight::from_parts(85_415_387, 7046)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(33, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `b` is `[0, 1]`.
	fn basic_block_compilation(_b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4516`
		//  Estimated: `10456`
		// Minimum execution time: 123_589_000 picoseconds.
		Weight::from_parts(127_489_869, 10456)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	/// The range of component `i` is `[0, 131072]`.
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1108`
		//  Estimated: `7041`
		// Minimum execution time: 754_650_000 picoseconds.
		Weight::from_parts(758_926_000, 7041)
			// Standard Error: 85
			.saturating_add(Weight::from_parts(15_657, 0).saturating_mul(c.into()))
			// Standard Error: 67
			.saturating_add(Weight::from_parts(1_573, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	/// The range of component `i` is `[0, 131072]`.
	/// The range of component `d` is `[0, 1]`.
	fn eth_instantiate_with_code(c: u32, i: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1122`
		//  Estimated: `7062 + d * (2475 ±0)`
		// Minimum execution time: 278_747_000 picoseconds.
		Weight::from_parts(145_795_450, 7062)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(14_966, 0).saturating_mul(c.into()))
			// Standard Error: 13
			.saturating_add(Weight::from_parts(542, 0).saturating_mul(i.into()))
			// Standard Error: 1_133_623
			.saturating_add(Weight::from_parts(41_772_022, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(d.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// The range of component `i` is `[0, 131072]`.
	fn instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1913`
		//  Estimated: `5338`
		// Minimum execution time: 171_706_000 picoseconds.
		Weight::from_parts(177_711_925, 5338)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(4_170, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1794`
		//  Estimated: `7734`
		// Minimum execution time: 86_797_000 picoseconds.
		Weight::from_parts(90_276_000, 7734)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	fn eth_call(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1794`
		//  Estimated: `7734 + d * (2475 ±0)`
		// Minimum execution time: 86_087_000 picoseconds.
		Weight::from_parts(89_671_759, 7734)
			// Standard Error: 300_888
			.saturating_add(Weight::from_parts(26_362_240, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(d.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// The range of component `c` is `[0, 102400]`.
	fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `3970`
		// Minimum execution time: 57_265_000 picoseconds.
		Weight::from_parts(38_840_872, 3970)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(14_420, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659`
		//  Estimated: `4124`
		// Minimum execution time: 47_571_000 picoseconds.
		Weight::from_parts(48_571_000, 4124)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `532`
		//  Estimated: `6472`
		// Minimum execution time: 20_565_000 picoseconds.
		Weight::from_parts(21_420_000, 6472)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	fn map_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `813`
		//  Estimated: `4278`
		// Minimum execution time: 58_321_000 picoseconds.
		Weight::from_parts(58_922_000, 4278)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:0 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn unmap_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `395`
		//  Estimated: `3860`
		// Minimum execution time: 43_929_000 picoseconds.
		Weight::from_parts(44_755_000, 3860)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SafeMode::EnteredUntil` (r:1 w:0)
	/// Proof: `SafeMode::EnteredUntil` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `TxPause::PausedCalls` (r:1 w:0)
	/// Proof: `TxPause::PausedCalls` (`max_values`: None, `max_size`: Some(532), added: 3007, mode: `Measured`)
	fn dispatch_as_fallback_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145`
		//  Estimated: `3610`
		// Minimum execution time: 12_925_000 picoseconds.
		Weight::from_parts(13_333_000, 3610)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_528_000 picoseconds.
		Weight::from_parts(8_699_408, 0)
			// Standard Error: 197
			.saturating_add(Weight::from_parts(182_534, 0).saturating_mul(r.into()))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 306_000 picoseconds.
		Weight::from_parts(375_000, 0)
	}
	fn seal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 288_000 picoseconds.
		Weight::from_parts(362_000, 0)
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn to_account_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `567`
		//  Estimated: `4032`
		// Minimum execution time: 7_364_000 picoseconds.
		Weight::from_parts(7_904_000, 4032)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `403`
		//  Estimated: `3868`
		// Minimum execution time: 9_050_000 picoseconds.
		Weight::from_parts(9_489_000, 3868)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn seal_own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 302_000 picoseconds.
		Weight::from_parts(337_000, 0)
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	fn seal_code_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `475`
		//  Estimated: `3940`
		// Minimum execution time: 12_570_000 picoseconds.
		Weight::from_parts(13_223_000, 3940)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	fn seal_caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 310_000 picoseconds.
		Weight::from_parts(364_000, 0)
	}
	fn seal_caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 259_000 picoseconds.
		Weight::from_parts(302_000, 0)
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(357_000, 0)
	}
	fn seal_weight_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 723_000 picoseconds.
		Weight::from_parts(797_000, 0)
	}
	fn seal_ref_time_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 268_000 picoseconds.
		Weight::from_parts(305_000, 0)
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `540`
		//  Estimated: `0`
		// Minimum execution time: 12_855_000 picoseconds.
		Weight::from_parts(13_194_000, 0)
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `791`
		//  Estimated: `4256`
		// Minimum execution time: 18_281_000 picoseconds.
		Weight::from_parts(19_051_000, 4256)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:1 w:0)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_get_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (1 ±0)`
		//  Estimated: `3736 + n * (1 ±0)`
		// Minimum execution time: 5_711_000 picoseconds.
		Weight::from_parts(6_613_746, 3736)
			// Standard Error: 7
			.saturating_add(Weight::from_parts(499, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_set_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_087_000 picoseconds.
		Weight::from_parts(2_316_148, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(493, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 267_000 picoseconds.
		Weight::from_parts(315_000, 0)
	}
	fn seal_minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 270_000 picoseconds.
		Weight::from_parts(313_000, 0)
	}
	fn seal_return_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 264_000 picoseconds.
		Weight::from_parts(324_000, 0)
	}
	fn seal_call_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 262_000 picoseconds.
		Weight::from_parts(309_000, 0)
	}
	fn seal_gas_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 531_000 picoseconds.
		Weight::from_parts(625_000, 0)
	}
	fn seal_gas_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 260_000 picoseconds.
		Weight::from_parts(311_000, 0)
	}
	fn seal_base_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 282_000 picoseconds.
		Weight::from_parts(312_000, 0)
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 261_000 picoseconds.
		Weight::from_parts(325_000, 0)
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn seal_block_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `1626`
		// Minimum execution time: 21_538_000 picoseconds.
		Weight::from_parts(22_409_000, 1626)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `Measured`)
	fn seal_block_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `3495`
		// Minimum execution time: 3_401_000 picoseconds.
		Weight::from_parts(3_673_000, 3495)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 300_000 picoseconds.
		Weight::from_parts(354_000, 0)
	}
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_680_000 picoseconds.
		Weight::from_parts(1_742_000, 0)
	}
	/// The range of component `n` is `[0, 1048572]`.
	fn seal_copy_to_contract(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 392_000 picoseconds.
		Weight::from_parts(262_995, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(202, 0).saturating_mul(n.into()))
	}
	fn seal_call_data_load() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 234_000 picoseconds.
		Weight::from_parts(291_000, 0)
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_call_data_copy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 267_000 picoseconds.
		Weight::from_parts(610_075, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(112, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 131072]`.
	fn seal_return(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 292_000 picoseconds.
		Weight::from_parts(466_044, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(200, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::DeletionQueue` (r:0 w:1)
	/// Proof: `Revive::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	fn seal_terminate(_u: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `583`
		//  Estimated: `4048`
		// Minimum execution time: 16_855_000 picoseconds.
		Weight::from_parts(17_325_000, 4048)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 416]`.
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_416_000 picoseconds.
		Weight::from_parts(4_382_711, 0)
			// Standard Error: 3_063
			.saturating_add(Weight::from_parts(257_304, 0).saturating_mul(t.into()))
			// Standard Error: 33
			.saturating_add(Weight::from_parts(1_239, 0).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `648`
		// Minimum execution time: 7_148_000 picoseconds.
		Weight::from_parts(7_616_000, 648)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10658`
		//  Estimated: `10658`
		// Minimum execution time: 41_435_000 picoseconds.
		Weight::from_parts(42_294_000, 10658)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `648`
		// Minimum execution time: 8_266_000 picoseconds.
		Weight::from_parts(8_704_000, 648)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10658`
		//  Estimated: `10658`
		// Minimum execution time: 43_187_000 picoseconds.
		Weight::from_parts(44_235_000, 10658)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + o * (1 ±0)`
		//  Estimated: `247 + o * (1 ±0)`
		// Minimum execution time: 8_740_000 picoseconds.
		Weight::from_parts(9_473_762, 247)
			// Standard Error: 60
			.saturating_add(Weight::from_parts(684, 0).saturating_mul(n.into()))
			// Standard Error: 60
			.saturating_add(Weight::from_parts(488, 0).saturating_mul(o.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 8_609_000 picoseconds.
		Weight::from_parts(9_456_962, 247)
			// Standard Error: 78
			.saturating_add(Weight::from_parts(882, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 7_777_000 picoseconds.
		Weight::from_parts(8_957_787, 247)
			// Standard Error: 85
			.saturating_add(Weight::from_parts(2_018, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 7_552_000 picoseconds.
		Weight::from_parts(8_333_059, 247)
			// Standard Error: 68
			.saturating_add(Weight::from_parts(1_086, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 9_262_000 picoseconds.
		Weight::from_parts(10_280_631, 247)
			// Standard Error: 84
			.saturating_add(Weight::from_parts(780, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_559_000 picoseconds.
		Weight::from_parts(1_678_000, 0)
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_939_000 picoseconds.
		Weight::from_parts(2_073_000, 0)
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_490_000 picoseconds.
		Weight::from_parts(1_582_000, 0)
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_679_000 picoseconds.
		Weight::from_parts(1_739_000, 0)
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_279_000 picoseconds.
		Weight::from_parts(1_339_000, 0)
	}
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_300_000 picoseconds.
		Weight::from_parts(2_536_575, 0)
			// Standard Error: 17
			.saturating_add(Weight::from_parts(334, 0).saturating_mul(n.into()))
			// Standard Error: 17
			.saturating_add(Weight::from_parts(392, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_164_000 picoseconds.
		Weight::from_parts(2_555_863, 0)
			// Standard Error: 34
			.saturating_add(Weight::from_parts(226, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_870_000 picoseconds.
		Weight::from_parts(2_188_923, 0)
			// Standard Error: 27
			.saturating_add(Weight::from_parts(316, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_713_000 picoseconds.
		Weight::from_parts(2_013_249, 0)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(210, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_549_000 picoseconds.
		Weight::from_parts(2_811_411, 0)
			// Standard Error: 31
			.saturating_add(Weight::from_parts(61, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 1048576]`.
	fn seal_call(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1925`
		//  Estimated: `5390`
		// Minimum execution time: 88_918_000 picoseconds.
		Weight::from_parts(70_713_518, 5390)
			// Standard Error: 172_359
			.saturating_add(Weight::from_parts(18_545_016, 0).saturating_mul(t.into()))
			// Standard Error: 172_359
			.saturating_add(Weight::from_parts(24_817_484, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(2, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 130972]`.
	fn seal_call_precompile(d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `366 + d * (212 ±0)`
		//  Estimated: `2021 + d * (2021 ±0)`
		// Minimum execution time: 24_697_000 picoseconds.
		Weight::from_parts(12_092_184, 2021)
			// Standard Error: 60_308
			.saturating_add(Weight::from_parts(13_519_246, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(319, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(d.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2021).saturating_mul(d.into()))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1363`
		//  Estimated: `4828`
		// Minimum execution time: 32_134_000 picoseconds.
		Weight::from_parts(33_037_000, 4828)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(1048612), added: 1051087, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 131072]`.
	fn seal_instantiate(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1413`
		//  Estimated: `4863 + d * (26 ±1) + t * (26 ±1)`
		// Minimum execution time: 153_561_000 picoseconds.
		Weight::from_parts(109_353_814, 4863)
			// Standard Error: 568_290
			.saturating_add(Weight::from_parts(21_328_059, 0).saturating_mul(t.into()))
			// Standard Error: 568_290
			.saturating_add(Weight::from_parts(29_078_265, 0).saturating_mul(d.into()))
			// Standard Error: 6
			.saturating_add(Weight::from_parts(3_922, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 26).saturating_mul(d.into()))
			.saturating_add(Weight::from_parts(0, 26).saturating_mul(t.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn sha2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_210_000 picoseconds.
		Weight::from_parts(6_742_356, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_262, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn identity(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 744_000 picoseconds.
		Weight::from_parts(726_223, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(112, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn ripemd_160(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_303_000 picoseconds.
		Weight::from_parts(5_014_415, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(3_746, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_keccak_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_191_000 picoseconds.
		Weight::from_parts(8_433_779, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(3_561, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn hash_blake2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_642_000 picoseconds.
		Weight::from_parts(16_588_050, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_403, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn hash_blake2_128(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_560_000 picoseconds.
		Weight::from_parts(11_627_209, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_418, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048321]`.
	fn seal_sr25519_verify(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 43_050_000 picoseconds.
		Weight::from_parts(78_880_483, 0)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(4_820, 0).saturating_mul(n.into()))
	}
	fn ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 46_308_000 picoseconds.
		Weight::from_parts(47_213_000, 0)
	}
	fn bn128_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_418_000 picoseconds.
		Weight::from_parts(15_454_000, 0)
	}
	fn bn128_mul() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 998_849_000 picoseconds.
		Weight::from_parts(1_007_812_000, 0)
	}
	/// The range of component `n` is `[0, 20]`.
	fn bn128_pairing(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 878_000 picoseconds.
		Weight::from_parts(4_894_017_610, 0)
			// Standard Error: 10_490_929
			.saturating_add(Weight::from_parts(5_933_404_461, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1200]`.
	fn blake2f(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 976_000 picoseconds.
		Weight::from_parts(1_204_210, 0)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(29_014, 0).saturating_mul(n.into()))
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_997_000 picoseconds.
		Weight::from_parts(13_136_000, 0)
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Measured`)
	fn seal_set_code_hash(_n: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `297`
		//  Estimated: `3762`
		// Minimum execution time: 12_778_000 picoseconds.
		Weight::from_parts(13_084_000, 3762)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn evm_opcode(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_130_000 picoseconds.
		Weight::from_parts(1_549_653, 0)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(2_365, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn instr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_557_000 picoseconds.
		Weight::from_parts(60_327_563, 0)
			// Standard Error: 1_035
			.saturating_add(Weight::from_parts(143_372, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 100000]`.
	fn instr_empty_loop(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_315_000 picoseconds.
		Weight::from_parts(7_548_170, 0)
			// Standard Error: 24
			.saturating_add(Weight::from_parts(72_139, 0).saturating_mul(r.into()))
	}
	/// Storage: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Proof: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Storage: `Revive::AccountInfoOf` (r:0 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn v1_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `6256`
		// Minimum execution time: 11_803_000 picoseconds.
		Weight::from_parts(12_358_000, 6256)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:2 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	fn v2_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245`
		//  Estimated: `6134`
		// Minimum execution time: 10_980_000 picoseconds.
		Weight::from_parts(11_452_000, 6134)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
