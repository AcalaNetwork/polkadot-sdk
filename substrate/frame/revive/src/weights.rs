// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_revive`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-08-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `znworker01`, CPU: `AMD EPYC 7272 12-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/kitchensink-runtime/kitchensink_runtime.wasm
// --pallet=pallet_revive
// --header=/home/ubuntu/work/polkadot-sdk/substrate/HEADER-APACHE2
// --output=substrate/frame/revive/src/weights.rs
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=substrate/.maintain/frame-weight-template.hbs
// --no-storage-info
// --no-min-squares
// --no-median-slopes
// --exclude-pallets=pallet_xcm,pallet_xcm_benchmarks::fungible,pallet_xcm_benchmarks::generic,pallet_nomination_pools,pallet_remark,pallet_transaction_storage

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_revive`.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn basic_block_compilation(b: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight;
	fn eth_instantiate_with_code(c: u32, i: u32, d: u32, ) -> Weight;
	fn instantiate(i: u32, ) -> Weight;
	fn call() -> Weight;
	fn eth_call(d: u32, ) -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn map_account() -> Weight;
	fn unmap_account() -> Weight;
	fn dispatch_as_fallback_account() -> Weight;
	fn noop_host_fn(r: u32, ) -> Weight;
	fn seal_caller() -> Weight;
	fn seal_origin() -> Weight;
	fn seal_to_account_id() -> Weight;
	fn seal_code_hash() -> Weight;
	fn seal_own_code_hash() -> Weight;
	fn seal_code_size() -> Weight;
	fn seal_caller_is_origin() -> Weight;
	fn seal_caller_is_root() -> Weight;
	fn seal_address() -> Weight;
	fn seal_weight_left() -> Weight;
	fn seal_ref_time_left() -> Weight;
	fn seal_balance() -> Weight;
	fn seal_balance_of() -> Weight;
	fn seal_get_immutable_data(n: u32, ) -> Weight;
	fn seal_set_immutable_data(n: u32, ) -> Weight;
	fn seal_value_transferred() -> Weight;
	fn seal_minimum_balance() -> Weight;
	fn seal_return_data_size() -> Weight;
	fn seal_call_data_size() -> Weight;
	fn seal_gas_limit() -> Weight;
	fn seal_gas_price() -> Weight;
	fn seal_base_fee() -> Weight;
	fn seal_block_number() -> Weight;
	fn seal_block_author() -> Weight;
	fn seal_block_hash() -> Weight;
	fn seal_now() -> Weight;
	fn seal_weight_to_fee() -> Weight;
	fn seal_copy_to_contract(n: u32, ) -> Weight;
	fn seal_call_data_load() -> Weight;
	fn seal_call_data_copy(n: u32, ) -> Weight;
	fn seal_return(n: u32, ) -> Weight;
	fn seal_terminate() -> Weight;
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight;
	fn get_storage_empty() -> Weight;
	fn get_storage_full() -> Weight;
	fn set_storage_empty() -> Weight;
	fn set_storage_full() -> Weight;
	fn seal_set_storage(n: u32, o: u32, ) -> Weight;
	fn seal_clear_storage(n: u32, ) -> Weight;
	fn seal_get_storage(n: u32, ) -> Weight;
	fn seal_contains_storage(n: u32, ) -> Weight;
	fn seal_take_storage(n: u32, ) -> Weight;
	fn set_transient_storage_empty() -> Weight;
	fn set_transient_storage_full() -> Weight;
	fn get_transient_storage_empty() -> Weight;
	fn get_transient_storage_full() -> Weight;
	fn rollback_transient_storage() -> Weight;
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight;
	fn seal_clear_transient_storage(n: u32, ) -> Weight;
	fn seal_get_transient_storage(n: u32, ) -> Weight;
	fn seal_contains_transient_storage(n: u32, ) -> Weight;
	fn seal_take_transient_storage(n: u32, ) -> Weight;
	fn seal_call(t: u32, d: u32, i: u32, ) -> Weight;
	fn seal_call_precompile(d: u32, i: u32, ) -> Weight;
	fn seal_delegate_call() -> Weight;
	fn seal_instantiate(t: u32, d: u32, i: u32, ) -> Weight;
	fn sha2_256(n: u32, ) -> Weight;
	fn identity(n: u32, ) -> Weight;
	fn ripemd_160(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(n: u32, ) -> Weight;
	fn seal_sr25519_verify(n: u32, ) -> Weight;
	fn ecdsa_recover() -> Weight;
	fn bn128_add() -> Weight;
	fn bn128_mul() -> Weight;
	fn bn128_pairing(n: u32, ) -> Weight;
	fn blake2f(n: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address() -> Weight;
	fn seal_set_code_hash() -> Weight;
	fn instr(r: u32, ) -> Weight;
	fn instr_empty_loop(r: u32, ) -> Weight;
	fn v1_migration_step() -> Weight;
	fn finalize_block(tx_count: u32) -> Weight;
}

/// Weights for `pallet_revive` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `1632`
		// Minimum execution time: 4_190_000 picoseconds.
		Weight::from_parts(4_360_000, 1632)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481 + k * (69 ±0)`
		//  Estimated: `471 + k * (70 ±0)`
		// Minimum execution time: 17_951_000 picoseconds.
		Weight::from_parts(1_237_933, 471)
			// Standard Error: 2_594
			.saturating_add(Weight::from_parts(1_415_142, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1236 + c * (1 ±0)`
		//  Estimated: `7177 + c * (1 ±0)`
		// Minimum execution time: 103_231_000 picoseconds.
		Weight::from_parts(139_971_947, 7177)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(1_160, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `b` is `[0, 1]`.
	fn basic_block_compilation(_b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4571`
		//  Estimated: `10511`
		// Minimum execution time: 142_171_000 picoseconds.
		Weight::from_parts(144_573_512, 10511)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::CounterForInflightEvents` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightEvents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::InflightEvents` (r:1 w:1)
	/// Proof: `Revive::InflightEvents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1122`
		//  Estimated: `7010`
		// Minimum execution time: 1_488_594_000 picoseconds.
		Weight::from_parts(275_849_383, 7010)
			// Standard Error: 29
			.saturating_add(Weight::from_parts(21_181, 0).saturating_mul(c.into()))
			// Standard Error: 11
			.saturating_add(Weight::from_parts(4_637, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::CounterForInflightEvents` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightEvents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::InflightEvents` (r:2 w:1)
	/// Proof: `Revive::InflightEvents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::CounterForInflightTransactions` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightTransactions` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::InflightTransactions` (r:1 w:1)
	/// Proof: `Revive::InflightTransactions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	/// The range of component `i` is `[0, 262144]`.
	/// The range of component `d` is `[0, 1]`.
	fn eth_instantiate_with_code(c: u32, i: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1122`
		//  Estimated: `7062 + d * (2475 ±0)`
		// Minimum execution time: 409_294_000 picoseconds.
		Weight::from_parts(247_558_980, 7062)
			// Standard Error: 22
			.saturating_add(Weight::from_parts(16_542, 0).saturating_mul(c.into()))
			// Standard Error: 8
			.saturating_add(Weight::from_parts(450, 0).saturating_mul(i.into()))
			// Standard Error: 1_501_279
			.saturating_add(Weight::from_parts(33_186_684, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes(10_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(d.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::CounterForInflightEvents` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightEvents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::InflightEvents` (r:1 w:1)
	/// Proof: `Revive::InflightEvents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1913`
		//  Estimated: `5359`
		// Minimum execution time: 213_672_000 picoseconds.
		Weight::from_parts(223_306_998, 5359)
			// Standard Error: 7
			.saturating_add(Weight::from_parts(4_683, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1943`
		//  Estimated: `7883`
		// Minimum execution time: 107_151_000 picoseconds.
		Weight::from_parts(108_331_000, 7883)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::InflightEvents` (r:2 w:1)
	/// Proof: `Revive::InflightEvents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::CounterForInflightEvents` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightEvents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::CounterForInflightTransactions` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightTransactions` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::InflightTransactions` (r:1 w:1)
	/// Proof: `Revive::InflightTransactions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	fn eth_call(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1976`
		//  Estimated: `7916 + d * (2475 ±0)`
		// Minimum execution time: 127_781_000 picoseconds.
		Weight::from_parts(130_168_489, 7916)
			// Standard Error: 205_034
			.saturating_add(Weight::from_parts(30_592_210, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(d.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `3970`
		// Minimum execution time: 69_071_000 picoseconds.
		Weight::from_parts(68_919_727, 3970)
			// Standard Error: 27
			.saturating_add(Weight::from_parts(16_231, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `658`
		//  Estimated: `4123`
		// Minimum execution time: 56_740_000 picoseconds.
		Weight::from_parts(57_350_000, 4123)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `553`
		//  Estimated: `6493`
		// Minimum execution time: 25_180_000 picoseconds.
		Weight::from_parts(25_750_000, 6493)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	fn map_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `813`
		//  Estimated: `4278`
		// Minimum execution time: 68_951_000 picoseconds.
		Weight::from_parts(70_221_000, 4278)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:0 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn unmap_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `395`
		//  Estimated: `3860`
		// Minimum execution time: 51_700_000 picoseconds.
		Weight::from_parts(52_250_000, 3860)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SafeMode::EnteredUntil` (r:1 w:0)
	/// Proof: `SafeMode::EnteredUntil` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `TxPause::PausedCalls` (r:1 w:0)
	/// Proof: `TxPause::PausedCalls` (`max_values`: None, `max_size`: Some(532), added: 3007, mode: `Measured`)
	fn dispatch_as_fallback_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145`
		//  Estimated: `3610`
		// Minimum execution time: 16_350_000 picoseconds.
		Weight::from_parts(16_800_000, 3610)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_820_000 picoseconds.
		Weight::from_parts(10_057_539, 0)
			// Standard Error: 124
			.saturating_add(Weight::from_parts(204_089, 0).saturating_mul(r.into()))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 410_000 picoseconds.
		Weight::from_parts(470_000, 0)
	}
	fn seal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 370_000 picoseconds.
		Weight::from_parts(430_000, 0)
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn seal_to_account_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `594`
		//  Estimated: `4059`
		// Minimum execution time: 12_200_000 picoseconds.
		Weight::from_parts(12_620_000, 4059)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `426`
		//  Estimated: `3891`
		// Minimum execution time: 11_720_000 picoseconds.
		Weight::from_parts(12_050_000, 3891)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn seal_own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 420_000 picoseconds.
		Weight::from_parts(450_000, 0)
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_code_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `497`
		//  Estimated: `3962`
		// Minimum execution time: 15_500_000 picoseconds.
		Weight::from_parts(16_050_000, 3962)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	fn seal_caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 410_000 picoseconds.
		Weight::from_parts(480_000, 0)
	}
	fn seal_caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 350_000 picoseconds.
		Weight::from_parts(390_000, 0)
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 360_000 picoseconds.
		Weight::from_parts(420_000, 0)
	}
	fn seal_weight_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 970_000 picoseconds.
		Weight::from_parts(1_050_000, 0)
	}
	fn seal_ref_time_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(360_000, 0)
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `529`
		//  Estimated: `0`
		// Minimum execution time: 16_331_000 picoseconds.
		Weight::from_parts(16_680_000, 0)
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `814`
		//  Estimated: `4279`
		// Minimum execution time: 22_981_000 picoseconds.
		Weight::from_parts(23_500_000, 4279)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:1 w:0)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_get_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294 + n * (1 ±0)`
		//  Estimated: `3759 + n * (1 ±0)`
		// Minimum execution time: 8_190_000 picoseconds.
		Weight::from_parts(8_743_903, 3759)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(567, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_set_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_410_000 picoseconds.
		Weight::from_parts(2_763_557, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(576, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 350_000 picoseconds.
		Weight::from_parts(420_000, 0)
	}
	fn seal_minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 340_000 picoseconds.
		Weight::from_parts(370_000, 0)
	}
	fn seal_return_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(370_000, 0)
	}
	fn seal_call_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 360_000 picoseconds.
		Weight::from_parts(400_000, 0)
	}
	fn seal_gas_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 570_000 picoseconds.
		Weight::from_parts(660_000, 0)
	}
	fn seal_gas_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 350_000 picoseconds.
		Weight::from_parts(380_000, 0)
	}
	fn seal_base_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 340_000 picoseconds.
		Weight::from_parts(390_000, 0)
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(430_000, 0)
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn seal_block_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `1626`
		// Minimum execution time: 26_500_000 picoseconds.
		Weight::from_parts(26_981_000, 1626)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `Measured`)
	fn seal_block_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `3495`
		// Minimum execution time: 4_470_000 picoseconds.
		Weight::from_parts(4_630_000, 3495)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(390_000, 0)
	}
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_090_000, 0)
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_copy_to_contract(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 530_000 picoseconds.
		Weight::from_parts(856_111, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(235, 0).saturating_mul(n.into()))
	}
	fn seal_call_data_load() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(360_000, 0)
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_call_data_copy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 350_000 picoseconds.
		Weight::from_parts(455_830, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(156, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_return(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 360_000 picoseconds.
		Weight::from_parts(579_334, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(235, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::DeletionQueue` (r:0 w:1)
	/// Proof: `Revive::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	fn seal_terminate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `605`
		//  Estimated: `4070`
		// Minimum execution time: 20_910_000 picoseconds.
		Weight::from_parts(21_230_000, 4070)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Revive::CounterForInflightEvents` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightEvents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::InflightEvents` (r:1 w:1)
	/// Proof: `Revive::InflightEvents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 416]`.
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `3793`
		// Minimum execution time: 17_600_000 picoseconds.
		Weight::from_parts(17_330_528, 3793)
			// Standard Error: 4_109
			.saturating_add(Weight::from_parts(489_685, 0).saturating_mul(t.into()))
			// Standard Error: 45
			.saturating_add(Weight::from_parts(2_288, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `648`
		// Minimum execution time: 8_800_000 picoseconds.
		Weight::from_parts(9_220_000, 648)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10658`
		//  Estimated: `10658`
		// Minimum execution time: 49_251_000 picoseconds.
		Weight::from_parts(50_231_000, 10658)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `648`
		// Minimum execution time: 10_010_000 picoseconds.
		Weight::from_parts(10_570_000, 648)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10658`
		//  Estimated: `10658`
		// Minimum execution time: 50_210_000 picoseconds.
		Weight::from_parts(51_410_000, 10658)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + o * (1 ±0)`
		//  Estimated: `247 + o * (1 ±0)`
		// Minimum execution time: 10_700_000 picoseconds.
		Weight::from_parts(11_280_389, 247)
			// Standard Error: 52
			.saturating_add(Weight::from_parts(574, 0).saturating_mul(n.into()))
			// Standard Error: 52
			.saturating_add(Weight::from_parts(414, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 10_451_000 picoseconds.
		Weight::from_parts(11_223_060, 247)
			// Standard Error: 58
			.saturating_add(Weight::from_parts(482, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 10_400_000 picoseconds.
		Weight::from_parts(11_149_798, 247)
			// Standard Error: 67
			.saturating_add(Weight::from_parts(1_066, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 9_450_000 picoseconds.
		Weight::from_parts(10_126_317, 247)
			// Standard Error: 61
			.saturating_add(Weight::from_parts(506, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 10_930_000 picoseconds.
		Weight::from_parts(11_935_533, 247)
			// Standard Error: 61
			.saturating_add(Weight::from_parts(1_422, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_980_000 picoseconds.
		Weight::from_parts(2_110_000, 0)
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_581_000 picoseconds.
		Weight::from_parts(2_710_000, 0)
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_920_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_170_000 picoseconds.
		Weight::from_parts(2_250_000, 0)
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_750_000 picoseconds.
		Weight::from_parts(1_830_000, 0)
	}
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_940_000 picoseconds.
		Weight::from_parts(3_217_056, 0)
			// Standard Error: 14
			.saturating_add(Weight::from_parts(333, 0).saturating_mul(n.into()))
			// Standard Error: 14
			.saturating_add(Weight::from_parts(520, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_730_000 picoseconds.
		Weight::from_parts(3_130_955, 0)
			// Standard Error: 21
			.saturating_add(Weight::from_parts(540, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_460_000 picoseconds.
		Weight::from_parts(2_768_601, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(500, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_230_000 picoseconds.
		Weight::from_parts(2_493_828, 0)
			// Standard Error: 14
			.saturating_add(Weight::from_parts(318, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_310_000 picoseconds.
		Weight::from_parts(3_538_981, 0)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(6, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_call(t: u32, d: u32, _i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1970`
		//  Estimated: `5435`
		// Minimum execution time: 101_881_000 picoseconds.
		Weight::from_parts(82_962_154, 5435)
			// Standard Error: 40_571
			.saturating_add(Weight::from_parts(20_883_155, 0).saturating_mul(t.into()))
			// Standard Error: 40_571
			.saturating_add(Weight::from_parts(28_985_108, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_call_precompile(d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `389 + d * (212 ±0)`
		//  Estimated: `2033 + d * (2033 ±0)`
		// Minimum execution time: 30_210_000 picoseconds.
		Weight::from_parts(15_417_296, 2033)
			// Standard Error: 42_738
			.saturating_add(Weight::from_parts(15_952_521, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(400, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2033).saturating_mul(d.into()))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1419`
		//  Estimated: `4884`
		// Minimum execution time: 38_360_000 picoseconds.
		Weight::from_parts(39_190_000, 4884)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_instantiate(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1558`
		//  Estimated: `5048`
		// Minimum execution time: 181_012_000 picoseconds.
		Weight::from_parts(134_856_865, 5048)
			// Standard Error: 403_579
			.saturating_add(Weight::from_parts(21_193_836, 0).saturating_mul(t.into()))
			// Standard Error: 403_579
			.saturating_add(Weight::from_parts(32_778_879, 0).saturating_mul(d.into()))
			// Standard Error: 2
			.saturating_add(Weight::from_parts(4_468, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn sha2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_560_000 picoseconds.
		Weight::from_parts(3_818_423, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_443, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn identity(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 940_000 picoseconds.
		Weight::from_parts(1_134_487, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(156, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn ripemd_160(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_800_000 picoseconds.
		Weight::from_parts(2_226_298, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(4_480, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_keccak_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_340_000 picoseconds.
		Weight::from_parts(3_513_671, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(4_296, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 860_000 picoseconds.
		Weight::from_parts(3_097_220, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_819, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_128(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 840_000 picoseconds.
		Weight::from_parts(3_098_168, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_818, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 261889]`.
	fn seal_sr25519_verify(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 53_311_000 picoseconds.
		Weight::from_parts(57_784_094, 0)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(6_213, 0).saturating_mul(n.into()))
	}
	fn ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 55_341_000 picoseconds.
		Weight::from_parts(55_650_000, 0)
	}
	fn bn128_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 20_560_000 picoseconds.
		Weight::from_parts(20_840_000, 0)
	}
	fn bn128_mul() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_163_631_000 picoseconds.
		Weight::from_parts(1_165_912_000, 0)
	}
	/// The range of component `n` is `[0, 20]`.
	fn bn128_pairing(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_010_000 picoseconds.
		Weight::from_parts(5_711_603_471, 0)
			// Standard Error: 12_036_359
			.saturating_add(Weight::from_parts(6_969_692_081, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1200]`.
	fn blake2f(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_210_000 picoseconds.
		Weight::from_parts(1_279_900, 0)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(38_705, 0).saturating_mul(n.into()))
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_370_000 picoseconds.
		Weight::from_parts(13_471_000, 0)
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_set_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `319`
		//  Estimated: `3784`
		// Minimum execution time: 13_060_000 picoseconds.
		Weight::from_parts(13_470_000, 3784)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn instr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_370_000 picoseconds.
		Weight::from_parts(47_108_555, 0)
			// Standard Error: 244
			.saturating_add(Weight::from_parts(158_761, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 100000]`.
	fn instr_empty_loop(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_860_000 picoseconds.
		Weight::from_parts(6_152_083, 0)
			// Standard Error: 30
			.saturating_add(Weight::from_parts(77_665, 0).saturating_mul(r.into()))
	}
	/// Storage: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Proof: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Storage: `Revive::AccountInfoOf` (r:0 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn v1_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `6256`
		// Minimum execution time: 15_190_000 picoseconds.
		Weight::from_parts(15_690_000, 6256)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}

    fn finalize_block(tx_count: u32) -> Weight {
        Weight::from_parts(200_000, 0) // a
            .saturating_add(Weight::from_parts(50_000, 0) // b
                .saturating_mul(tx_count.into()))
    }
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `1632`
		// Minimum execution time: 4_190_000 picoseconds.
		Weight::from_parts(4_360_000, 1632)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481 + k * (69 ±0)`
		//  Estimated: `471 + k * (70 ±0)`
		// Minimum execution time: 17_951_000 picoseconds.
		Weight::from_parts(1_237_933, 471)
			// Standard Error: 2_594
			.saturating_add(Weight::from_parts(1_415_142, 0).saturating_mul(k.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1236 + c * (1 ±0)`
		//  Estimated: `7177 + c * (1 ±0)`
		// Minimum execution time: 103_231_000 picoseconds.
		Weight::from_parts(139_971_947, 7177)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(1_160, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `b` is `[0, 1]`.
	fn basic_block_compilation(_b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4571`
		//  Estimated: `10511`
		// Minimum execution time: 142_171_000 picoseconds.
		Weight::from_parts(144_573_512, 10511)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::CounterForInflightEvents` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightEvents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::InflightEvents` (r:1 w:1)
	/// Proof: `Revive::InflightEvents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1122`
		//  Estimated: `7010`
		// Minimum execution time: 1_488_594_000 picoseconds.
		Weight::from_parts(275_849_383, 7010)
			// Standard Error: 29
			.saturating_add(Weight::from_parts(21_181, 0).saturating_mul(c.into()))
			// Standard Error: 11
			.saturating_add(Weight::from_parts(4_637, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::CounterForInflightEvents` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightEvents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::InflightEvents` (r:2 w:1)
	/// Proof: `Revive::InflightEvents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::CounterForInflightTransactions` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightTransactions` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::InflightTransactions` (r:1 w:1)
	/// Proof: `Revive::InflightTransactions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	/// The range of component `i` is `[0, 262144]`.
	/// The range of component `d` is `[0, 1]`.
	fn eth_instantiate_with_code(c: u32, i: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1122`
		//  Estimated: `7062 + d * (2475 ±0)`
		// Minimum execution time: 409_294_000 picoseconds.
		Weight::from_parts(247_558_980, 7062)
			// Standard Error: 22
			.saturating_add(Weight::from_parts(16_542, 0).saturating_mul(c.into()))
			// Standard Error: 8
			.saturating_add(Weight::from_parts(450, 0).saturating_mul(i.into()))
			// Standard Error: 1_501_279
			.saturating_add(Weight::from_parts(33_186_684, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(d.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::CounterForInflightEvents` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightEvents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::InflightEvents` (r:1 w:1)
	/// Proof: `Revive::InflightEvents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1913`
		//  Estimated: `5359`
		// Minimum execution time: 213_672_000 picoseconds.
		Weight::from_parts(223_306_998, 5359)
			// Standard Error: 7
			.saturating_add(Weight::from_parts(4_683, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1943`
		//  Estimated: `7883`
		// Minimum execution time: 107_151_000 picoseconds.
		Weight::from_parts(108_331_000, 7883)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:2 w:2)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::InflightEvents` (r:2 w:1)
	/// Proof: `Revive::InflightEvents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Revive::CounterForInflightEvents` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightEvents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::CounterForInflightTransactions` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightTransactions` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::InflightTransactions` (r:1 w:1)
	/// Proof: `Revive::InflightTransactions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	fn eth_call(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1976`
		//  Estimated: `7916 + d * (2475 ±0)`
		// Minimum execution time: 127_781_000 picoseconds.
		Weight::from_parts(130_168_489, 7916)
			// Standard Error: 205_034
			.saturating_add(Weight::from_parts(30_592_210, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(d.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `3970`
		// Minimum execution time: 69_071_000 picoseconds.
		Weight::from_parts(68_919_727, 3970)
			// Standard Error: 27
			.saturating_add(Weight::from_parts(16_231, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `658`
		//  Estimated: `4123`
		// Minimum execution time: 56_740_000 picoseconds.
		Weight::from_parts(57_350_000, 4123)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `553`
		//  Estimated: `6493`
		// Minimum execution time: 25_180_000 picoseconds.
		Weight::from_parts(25_750_000, 6493)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	fn map_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `813`
		//  Estimated: `4278`
		// Minimum execution time: 68_951_000 picoseconds.
		Weight::from_parts(70_221_000, 4278)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(427), added: 2902, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:0 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn unmap_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `395`
		//  Estimated: `3860`
		// Minimum execution time: 51_700_000 picoseconds.
		Weight::from_parts(52_250_000, 3860)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SafeMode::EnteredUntil` (r:1 w:0)
	/// Proof: `SafeMode::EnteredUntil` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `TxPause::PausedCalls` (r:1 w:0)
	/// Proof: `TxPause::PausedCalls` (`max_values`: None, `max_size`: Some(532), added: 3007, mode: `Measured`)
	fn dispatch_as_fallback_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `145`
		//  Estimated: `3610`
		// Minimum execution time: 16_350_000 picoseconds.
		Weight::from_parts(16_800_000, 3610)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_820_000 picoseconds.
		Weight::from_parts(10_057_539, 0)
			// Standard Error: 124
			.saturating_add(Weight::from_parts(204_089, 0).saturating_mul(r.into()))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 410_000 picoseconds.
		Weight::from_parts(470_000, 0)
	}
	fn seal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 370_000 picoseconds.
		Weight::from_parts(430_000, 0)
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn seal_to_account_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `594`
		//  Estimated: `4059`
		// Minimum execution time: 12_200_000 picoseconds.
		Weight::from_parts(12_620_000, 4059)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `426`
		//  Estimated: `3891`
		// Minimum execution time: 11_720_000 picoseconds.
		Weight::from_parts(12_050_000, 3891)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn seal_own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 420_000 picoseconds.
		Weight::from_parts(450_000, 0)
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_code_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `497`
		//  Estimated: `3962`
		// Minimum execution time: 15_500_000 picoseconds.
		Weight::from_parts(16_050_000, 3962)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	fn seal_caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 410_000 picoseconds.
		Weight::from_parts(480_000, 0)
	}
	fn seal_caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 350_000 picoseconds.
		Weight::from_parts(390_000, 0)
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 360_000 picoseconds.
		Weight::from_parts(420_000, 0)
	}
	fn seal_weight_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 970_000 picoseconds.
		Weight::from_parts(1_050_000, 0)
	}
	fn seal_ref_time_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(360_000, 0)
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `529`
		//  Estimated: `0`
		// Minimum execution time: 16_331_000 picoseconds.
		Weight::from_parts(16_680_000, 0)
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	fn seal_balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `814`
		//  Estimated: `4279`
		// Minimum execution time: 22_981_000 picoseconds.
		Weight::from_parts(23_500_000, 4279)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:1 w:0)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_get_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294 + n * (1 ±0)`
		//  Estimated: `3759 + n * (1 ±0)`
		// Minimum execution time: 8_190_000 picoseconds.
		Weight::from_parts(8_743_903, 3759)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(567, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_set_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_410_000 picoseconds.
		Weight::from_parts(2_763_557, 0)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(576, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 350_000 picoseconds.
		Weight::from_parts(420_000, 0)
	}
	fn seal_minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 340_000 picoseconds.
		Weight::from_parts(370_000, 0)
	}
	fn seal_return_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(370_000, 0)
	}
	fn seal_call_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 360_000 picoseconds.
		Weight::from_parts(400_000, 0)
	}
	fn seal_gas_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 570_000 picoseconds.
		Weight::from_parts(660_000, 0)
	}
	fn seal_gas_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 350_000 picoseconds.
		Weight::from_parts(380_000, 0)
	}
	fn seal_base_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 340_000 picoseconds.
		Weight::from_parts(390_000, 0)
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(430_000, 0)
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn seal_block_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `1626`
		// Minimum execution time: 26_500_000 picoseconds.
		Weight::from_parts(26_981_000, 1626)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `Measured`)
	fn seal_block_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `3495`
		// Minimum execution time: 4_470_000 picoseconds.
		Weight::from_parts(4_630_000, 3495)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(390_000, 0)
	}
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_090_000, 0)
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_copy_to_contract(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 530_000 picoseconds.
		Weight::from_parts(856_111, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(235, 0).saturating_mul(n.into()))
	}
	fn seal_call_data_load() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 330_000 picoseconds.
		Weight::from_parts(360_000, 0)
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_call_data_copy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 350_000 picoseconds.
		Weight::from_parts(455_830, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(156, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_return(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 360_000 picoseconds.
		Weight::from_parts(579_334, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(235, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::DeletionQueue` (r:0 w:1)
	/// Proof: `Revive::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	fn seal_terminate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `605`
		//  Estimated: `4070`
		// Minimum execution time: 20_910_000 picoseconds.
		Weight::from_parts(21_230_000, 4070)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Revive::CounterForInflightEvents` (r:1 w:1)
	/// Proof: `Revive::CounterForInflightEvents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Measured`)
	/// Storage: `Revive::InflightEvents` (r:1 w:1)
	/// Proof: `Revive::InflightEvents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 416]`.
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `3793`
		// Minimum execution time: 17_600_000 picoseconds.
		Weight::from_parts(17_330_528, 3793)
			// Standard Error: 4_109
			.saturating_add(Weight::from_parts(489_685, 0).saturating_mul(t.into()))
			// Standard Error: 45
			.saturating_add(Weight::from_parts(2_288, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `648`
		// Minimum execution time: 8_800_000 picoseconds.
		Weight::from_parts(9_220_000, 648)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10658`
		//  Estimated: `10658`
		// Minimum execution time: 49_251_000 picoseconds.
		Weight::from_parts(50_231_000, 10658)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `648`
		// Minimum execution time: 10_010_000 picoseconds.
		Weight::from_parts(10_570_000, 648)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10658`
		//  Estimated: `10658`
		// Minimum execution time: 50_210_000 picoseconds.
		Weight::from_parts(51_410_000, 10658)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + o * (1 ±0)`
		//  Estimated: `247 + o * (1 ±0)`
		// Minimum execution time: 10_700_000 picoseconds.
		Weight::from_parts(11_280_389, 247)
			// Standard Error: 52
			.saturating_add(Weight::from_parts(574, 0).saturating_mul(n.into()))
			// Standard Error: 52
			.saturating_add(Weight::from_parts(414, 0).saturating_mul(o.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 10_451_000 picoseconds.
		Weight::from_parts(11_223_060, 247)
			// Standard Error: 58
			.saturating_add(Weight::from_parts(482, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 10_400_000 picoseconds.
		Weight::from_parts(11_149_798, 247)
			// Standard Error: 67
			.saturating_add(Weight::from_parts(1_066, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 9_450_000 picoseconds.
		Weight::from_parts(10_126_317, 247)
			// Standard Error: 61
			.saturating_add(Weight::from_parts(506, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248 + n * (1 ±0)`
		//  Estimated: `247 + n * (1 ±0)`
		// Minimum execution time: 10_930_000 picoseconds.
		Weight::from_parts(11_935_533, 247)
			// Standard Error: 61
			.saturating_add(Weight::from_parts(1_422, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_980_000 picoseconds.
		Weight::from_parts(2_110_000, 0)
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_581_000 picoseconds.
		Weight::from_parts(2_710_000, 0)
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_920_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_170_000 picoseconds.
		Weight::from_parts(2_250_000, 0)
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_750_000 picoseconds.
		Weight::from_parts(1_830_000, 0)
	}
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_940_000 picoseconds.
		Weight::from_parts(3_217_056, 0)
			// Standard Error: 14
			.saturating_add(Weight::from_parts(333, 0).saturating_mul(n.into()))
			// Standard Error: 14
			.saturating_add(Weight::from_parts(520, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_730_000 picoseconds.
		Weight::from_parts(3_130_955, 0)
			// Standard Error: 21
			.saturating_add(Weight::from_parts(540, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_460_000 picoseconds.
		Weight::from_parts(2_768_601, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(500, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_230_000 picoseconds.
		Weight::from_parts(2_493_828, 0)
			// Standard Error: 14
			.saturating_add(Weight::from_parts(318, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_310_000 picoseconds.
		Weight::from_parts(3_538_981, 0)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(6, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_call(t: u32, d: u32, _i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1970`
		//  Estimated: `5435`
		// Minimum execution time: 101_881_000 picoseconds.
		Weight::from_parts(82_962_154, 5435)
			// Standard Error: 40_571
			.saturating_add(Weight::from_parts(20_883_155, 0).saturating_mul(t.into()))
			// Standard Error: 40_571
			.saturating_add(Weight::from_parts(28_985_108, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_call_precompile(d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `389 + d * (212 ±0)`
		//  Estimated: `2033 + d * (2033 ±0)`
		// Minimum execution time: 30_210_000 picoseconds.
		Weight::from_parts(15_417_296, 2033)
			// Standard Error: 42_738
			.saturating_add(Weight::from_parts(15_952_521, 0).saturating_mul(d.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(400, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(d.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_parts(0, 2033).saturating_mul(d.into()))
	}
	/// Storage: `Revive::AccountInfoOf` (r:1 w:0)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1419`
		//  Estimated: `4884`
		// Minimum execution time: 38_360_000 picoseconds.
		Weight::from_parts(39_190_000, 4884)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::AccountInfoOf` (r:1 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_instantiate(t: u32, d: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1558`
		//  Estimated: `5048`
		// Minimum execution time: 181_012_000 picoseconds.
		Weight::from_parts(134_856_865, 5048)
			// Standard Error: 403_579
			.saturating_add(Weight::from_parts(21_193_836, 0).saturating_mul(t.into()))
			// Standard Error: 403_579
			.saturating_add(Weight::from_parts(32_778_879, 0).saturating_mul(d.into()))
			// Standard Error: 2
			.saturating_add(Weight::from_parts(4_468, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn sha2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_560_000 picoseconds.
		Weight::from_parts(3_818_423, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_443, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn identity(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 940_000 picoseconds.
		Weight::from_parts(1_134_487, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(156, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn ripemd_160(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_800_000 picoseconds.
		Weight::from_parts(2_226_298, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(4_480, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_keccak_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_340_000 picoseconds.
		Weight::from_parts(3_513_671, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(4_296, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 860_000 picoseconds.
		Weight::from_parts(3_097_220, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_819, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_128(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 840_000 picoseconds.
		Weight::from_parts(3_098_168, 0)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(1_818, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 261889]`.
	fn seal_sr25519_verify(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 53_311_000 picoseconds.
		Weight::from_parts(57_784_094, 0)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(6_213, 0).saturating_mul(n.into()))
	}
	fn ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 55_341_000 picoseconds.
		Weight::from_parts(55_650_000, 0)
	}
	fn bn128_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 20_560_000 picoseconds.
		Weight::from_parts(20_840_000, 0)
	}
	fn bn128_mul() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_163_631_000 picoseconds.
		Weight::from_parts(1_165_912_000, 0)
	}
	/// The range of component `n` is `[0, 20]`.
	fn bn128_pairing(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_010_000 picoseconds.
		Weight::from_parts(5_711_603_471, 0)
			// Standard Error: 12_036_359
			.saturating_add(Weight::from_parts(6_969_692_081, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1200]`.
	fn blake2f(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_210_000 picoseconds.
		Weight::from_parts(1_279_900, 0)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(38_705, 0).saturating_mul(n.into()))
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_370_000 picoseconds.
		Weight::from_parts(13_471_000, 0)
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_set_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `319`
		//  Estimated: `3784`
		// Minimum execution time: 13_060_000 picoseconds.
		Weight::from_parts(13_470_000, 3784)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn instr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_370_000 picoseconds.
		Weight::from_parts(47_108_555, 0)
			// Standard Error: 244
			.saturating_add(Weight::from_parts(158_761, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 100000]`.
	fn instr_empty_loop(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_860_000 picoseconds.
		Weight::from_parts(6_152_083, 0)
			// Standard Error: 30
			.saturating_add(Weight::from_parts(77_665, 0).saturating_mul(r.into()))
	}
	/// Storage: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Proof: UNKNOWN KEY `0x735f040a5d490f1107ad9c56f5ca00d2060e99e5378e562537cf3bc983e17b91` (r:2 w:1)
	/// Storage: `Revive::AccountInfoOf` (r:0 w:1)
	/// Proof: `Revive::AccountInfoOf` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn v1_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `6256`
		// Minimum execution time: 15_190_000 picoseconds.
		Weight::from_parts(15_690_000, 6256)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}

    fn finalize_block(tx_count: u32) -> Weight {
        Weight::from_parts(200_000, 0) // a
            .saturating_add(Weight::from_parts(50_000, 0) // b
                .saturating_mul(tx_count.into()))
    }
}
