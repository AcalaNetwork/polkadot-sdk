// generated by polka.codes
//! Tests for the savings pallet.

use super::*;
use crate::mock::*;
use frame_support::{assert_noop, assert_ok, traits::Hooks};
use sp_runtime::{traits::AccountIdConversion, DispatchError};

#[test]
fn create_pool_successfully() {
	new_test_ext().execute_with(|| {
		assert_ok!(Assets::create(RuntimeOrigin::signed(1), 1.into(), 1, 1));
		assert_ok!(Assets::create(RuntimeOrigin::signed(1), 2.into(), 1, 1));
		assert_ok!(Savings::create_pool(RuntimeOrigin::signed(1), 1, 2, 100, Some(1)));
	});
}

#[test]
fn create_pool_emits_event() {
	new_test_ext().execute_with(|| {
		System::set_block_number(1);
		assert_ok!(Assets::create(RuntimeOrigin::signed(1), 1.into(), 1, 1));
		assert_ok!(Assets::create(RuntimeOrigin::signed(1), 2.into(), 1, 1));
		assert_ok!(Savings::create_pool(RuntimeOrigin::signed(1), 1, 2, 100, Some(1)));
		System::assert_last_event(RuntimeEvent::Savings(crate::Event::PoolCreated { pool_id: 0 }));
	});
}

#[test]
fn create_pool_unauthorized() {
	new_test_ext().execute_with(|| {
		assert_noop!(
			Savings::create_pool(RuntimeOrigin::signed(2), 1, 2, 100, Some(1)),
			DispatchError::BadOrigin
		);
	});
}

#[test]
fn create_pool_correct_params() {
	new_test_ext().execute_with(|| {
		let staked_asset_id = 1;
		let reward_asset_id = 2;
		let reward_rate_per_block = 100;
		let admin = Some(1);

		System::set_block_number(10);

		assert_ok!(Assets::create(RuntimeOrigin::signed(1), staked_asset_id.into(), 1, 1));
		assert_ok!(Assets::create(RuntimeOrigin::signed(1), reward_asset_id.into(), 1, 1));

		assert_ok!(Savings::create_pool(
			RuntimeOrigin::signed(1),
			staked_asset_id,
			reward_asset_id,
			reward_rate_per_block,
			admin
		));

		// We can't check the pool directly as its fields are private.
		// We rely on the event and the success of the extrinsic.
	});
}

#[test]
fn on_initialize_distributes_rewards() {
	new_test_ext().execute_with(|| {
		let reward_asset_id = 2;
		let reward_rate_per_block = 100;
		let savings_account = SavingsPalletId::get().into_account_truncating();

		// Create asset and mint some to the savings account
		assert_ok!(Assets::create(RuntimeOrigin::signed(1), reward_asset_id.into(), 1, 1));
		assert_ok!(Assets::create(RuntimeOrigin::signed(1), 1.into(), 1, 1)); // staked asset
		assert_ok!(Assets::mint(
			RuntimeOrigin::signed(1),
			reward_asset_id.into(),
			savings_account,
			1_000_000
		));

		// Create a pool
		assert_ok!(Savings::create_pool(
			RuntimeOrigin::signed(1),
			1, // staked asset
			reward_asset_id,
			reward_rate_per_block,
			Some(1)
		));

		// Run to a block that is a multiple of UpdatePeriod
		Savings::on_initialize(UpdatePeriod::get());

		let pool_id = 0;
		let pool_account = AssetRewardsPalletId::get().into_sub_account_truncating(pool_id);
		let expected_reward = reward_rate_per_block * Into::<u128>::into(UpdatePeriod::get());

		// Check that the reward has been transferred to the pool account
		assert_eq!(Assets::balance(reward_asset_id, &pool_account), expected_reward);
	});
}
