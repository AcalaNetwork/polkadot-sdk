// generated by polka.codes
//! Tests for the savings pallet.

use super::*;
use crate::mock::*;
use frame_support::{assert_noop, assert_ok, traits::Hooks};
use sp_runtime::{traits::AccountIdConversion, DispatchError};

#[test]
fn create_pool_successfully() {
	new_test_ext().execute_with(|| {
		assert_ok!(Savings::create_pool(RuntimeOrigin::signed(1), 1, 2, 100, Some(1)));
	});
}

#[test]
fn create_pool_emits_event() {
	new_test_ext().execute_with(|| {
		System::set_block_number(1);
		assert_ok!(Savings::create_pool(RuntimeOrigin::signed(1), 1, 2, 100, Some(1)));
		System::assert_last_event(RuntimeEvent::Savings(crate::Event::PoolCreated { pool_id: 0 }));
	});
}

#[test]
fn create_pool_unauthorized() {
	new_test_ext().execute_with(|| {
		assert_noop!(
			Savings::create_pool(RuntimeOrigin::signed(2), 1, 2, 100, Some(1)),
			DispatchError::BadOrigin
		);
	});
}

#[test]
fn create_pool_correct_params() {
	new_test_ext().execute_with(|| {
		let staked_asset_id = 1;
		let reward_asset_id = 2;
		let reward_rate_per_block = 100;
		let admin = Some(1);

		System::set_block_number(10);



		assert_ok!(Savings::create_pool(
			RuntimeOrigin::signed(1),
			staked_asset_id,
			reward_asset_id,
			reward_rate_per_block,
			admin
		));

		// We can't check the pool directly as its fields are private.
		// We rely on the event and the success of the extrinsic.
	});
}

#[test]
fn on_initialize_distributes_rewards() {
	new_test_ext().execute_with(|| {
		let reward_asset_id = 2;
		let reward_rate_per_block = 100;
		let savings_account: AccountId = SavingsPalletId::get().into_account_truncating();

		// Create asset and mint some to the savings account

		// Create a pool
		System::set_block_number(1);
		Savings::on_initialize(1); // This will set LastUpdatedBlock to 1
		assert_ok!(Savings::create_pool(
			RuntimeOrigin::signed(1),
			1, // staked asset
			reward_asset_id,
			reward_rate_per_block,
			Some(1)
		));

		// Run to a block that is a multiple of UpdatePeriod
		let current_block = UpdatePeriod::get();
		System::set_block_number(current_block);
		Savings::on_initialize(current_block);

		let pool_id = 0;
		let pool_account = AssetRewardsPalletId::get().into_sub_account_truncating(pool_id);
		let elapsed = current_block - 1;
		let expected_reward = reward_rate_per_block * Into::<u128>::into(elapsed);

		// Check that the reward has been transferred to the pool account
		assert_eq!(Assets::balance(reward_asset_id, &pool_account), expected_reward);
		assert_eq!(LastUpdatedBlock::<Test>::get(), Some(current_block));
	});
}

#[test]
fn on_initialize_handles_block_jumps() {
	new_test_ext().execute_with(|| {
		let staked_asset_id = 1;
		let reward_asset_id = 2;
		let reward_rate_per_block = 10; // for easier calculation
		let savings_account: AccountId = SavingsPalletId::get().into_account_truncating();

		// Setup assets and pool
		assert_ok!(Savings::create_pool(
			RuntimeOrigin::signed(1),
			staked_asset_id,
			reward_asset_id,
			reward_rate_per_block,
			Some(1)
		));
		let pool_id = 0;
		let pool_account = AssetRewardsPalletId::get().into_sub_account_truncating(pool_id);

		// 1. Initial run
		System::set_block_number(1);
		Savings::on_initialize(1);
		assert_eq!(LastUpdatedBlock::<Test>::get(), Some(1));
		assert_eq!(Assets::balance(reward_asset_id, &pool_account), 0);

		// 2. Jump forward 49 blocks
		System::set_block_number(50);
		Savings::on_initialize(50);
		let elapsed1 = 50 - 1;
		let expected_reward1 = reward_rate_per_block * elapsed1; // 10 * 49 = 490
		assert_eq!(Assets::balance(reward_asset_id, &pool_account), expected_reward1);
		assert_eq!(LastUpdatedBlock::<Test>::get(), Some(50));

		// 3. Jump forward another 51 blocks
		System::set_block_number(101);
		Savings::on_initialize(101);
		let elapsed2 = 101 - 50;
		let expected_reward2 = expected_reward1 + (reward_rate_per_block * elapsed2); // 490 + 10 * 51 = 490 + 510 = 1000
		assert_eq!(Assets::balance(reward_asset_id, &pool_account), expected_reward2);
		assert_eq!(LastUpdatedBlock::<Test>::get(), Some(101));

		// 4. Big block number jump (300 blocks)
		System::set_block_number(401);
		Savings::on_initialize(401);
		let elapsed3 = 401 - 101;
		let expected_reward3 = expected_reward2 + (reward_rate_per_block * elapsed3); // 1000 + 10 * 300 = 4000
		assert_eq!(Assets::balance(reward_asset_id, &pool_account), expected_reward3);
		assert_eq!(LastUpdatedBlock::<Test>::get(), Some(401));

		// 5. Another jump
		System::set_block_number(551);
		Savings::on_initialize(551);
		let elapsed4 = 551 - 401;
		let expected_reward4 = expected_reward3 + (reward_rate_per_block * elapsed4); // 4000 + 10 * 150 = 5500
		assert_eq!(Assets::balance(reward_asset_id, &pool_account), expected_reward4);
		assert_eq!(LastUpdatedBlock::<Test>::get(), Some(551));
	});
}
