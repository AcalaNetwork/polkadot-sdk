// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `frame_benchmarking_pallet_pov`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-01-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `265dfb6aaaa9`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// target/production/substrate-node
// benchmark
// pallet
// --extrinsic=*
// --chain=dev
// --pallet=frame_benchmarking_pallet_pov
// --header=/__w/polkadot-sdk/polkadot-sdk/substrate/HEADER-APACHE2
// --output=/__w/polkadot-sdk/polkadot-sdk/substrate/frame/benchmarking/pov/src/weights.rs
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=substrate/.maintain/frame-weight-template.hbs
// --no-storage-info
// --no-min-squares
// --no-median-slopes

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `frame_benchmarking_pallet_pov`.
pub trait WeightInfo {
	fn storage_single_value_read() -> Weight;
	fn storage_single_value_ignored_read() -> Weight;
	fn storage_single_value_ignored_some_read() -> Weight;
	fn storage_single_value_read_twice() -> Weight;
	fn storage_single_value_write() -> Weight;
	fn storage_single_value_kill() -> Weight;
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight;
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight;
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight;
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight;
	fn storage_map_read_per_component_one_ignored(n: u32, m: u32, ) -> Weight;
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight;
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight;
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight;
	fn storage_value_bounded_read() -> Weight;
	fn storage_value_unbounded_read() -> Weight;
	fn storage_value_unbounded_ignored_read() -> Weight;
	fn storage_value_bounded_and_unbounded_read() -> Weight;
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight;
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight;
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight;
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight;
	fn emit_event() -> Weight;
	fn noop() -> Weight;
	fn storage_iteration() -> Weight;
	fn storage_root_is_the_same_every_time(i: u32, ) -> Weight;
}

/// Weights for `frame_benchmarking_pallet_pov` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `1489`
		// Minimum execution time: 4_142_000 picoseconds.
		Weight::from_parts(4_312_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Ignored`)
	fn storage_single_value_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `0`
		// Minimum execution time: 4_110_000 picoseconds.
		Weight::from_parts(4_327_000, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Pov::Value2` (r:1 w:0)
	/// Proof: `Pov::Value2` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Ignored`)
	fn storage_single_value_ignored_some_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `226`
		//  Estimated: `1489`
		// Minimum execution time: 5_483_000 picoseconds.
		Weight::from_parts(5_774_000, 1489)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_read_twice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `1489`
		// Minimum execution time: 4_598_000 picoseconds.
		Weight::from_parts(4_819_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Value` (r:0 w:1)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_write() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 412_000 picoseconds.
		Weight::from_parts(462_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Pov::Value` (r:0 w:1)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_kill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 368_000 picoseconds.
		Weight::from_parts(417_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Measured`)
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1341`
		//  Estimated: `4806`
		// Minimum execution time: 17_335_000 picoseconds.
		Weight::from_parts(17_815_000, 4806)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Measured`)
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1544`
		//  Estimated: `5009`
		// Minimum execution time: 19_046_000 picoseconds.
		Weight::from_parts(19_481_000, 5009)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Measured`)
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2044`
		//  Estimated: `5509`
		// Minimum execution time: 16_637_000 picoseconds.
		Weight::from_parts(17_174_000, 5509)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:100 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Pov::Map16M` (r:100 w:0)
	/// Proof: `Pov::Map16M` (`max_values`: Some(16000000), `max_size`: Some(36), added: 3006, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `581 + m * (188 ±0) + n * (188 ±0)`
		//  Estimated: `990 + m * (2511 ±0) + n * (3006 ±0)`
		// Minimum execution time: 528_013_000 picoseconds.
		Weight::from_parts(319_136_331, 990)
			// Standard Error: 27_946
			.saturating_add(Weight::from_parts(2_484_286, 0).saturating_mul(n.into()))
			// Standard Error: 27_946
			.saturating_add(Weight::from_parts(2_489_473, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
	}
	/// Storage: `Pov::Map1M` (r:100 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Ignored`)
	/// Storage: `Pov::Map16M` (r:100 w:0)
	/// Proof: `Pov::Map16M` (`max_values`: Some(16000000), `max_size`: Some(36), added: 3006, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component_one_ignored(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `581 + m * (188 ±0) + n * (188 ±0)`
		//  Estimated: `1751 + m * (189 ±0) + n * (3006 ±0)`
		// Minimum execution time: 520_932_000 picoseconds.
		Weight::from_parts(312_598_016, 1751)
			// Standard Error: 28_271
			.saturating_add(Weight::from_parts(2_547_790, 0).saturating_mul(n.into()))
			// Standard Error: 28_271
			.saturating_add(Weight::from_parts(2_529_866, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 189).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `236`
		//  Estimated: `3501`
		// Minimum execution time: 167_000 picoseconds.
		Weight::from_parts(5_026_685, 3501)
			// Standard Error: 1_455
			.saturating_add(Weight::from_parts(1_029_244, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:100 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213 + n * (40 ±0)`
		//  Estimated: `990 + n * (2511 ±0)`
		// Minimum execution time: 156_000 picoseconds.
		Weight::from_parts(2_643_015, 990)
			// Standard Error: 7_428
			.saturating_add(Weight::from_parts(12_968_946, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(n.into()))
	}
	/// Storage: `Pov::DoubleMap1M` (r:1024 w:0)
	/// Proof: `Pov::DoubleMap1M` (`max_values`: Some(1000000), `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 1024]`.
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `22004 + n * (57 ±0)`
		//  Estimated: `990 + n * (2543 ±0)`
		// Minimum execution time: 250_000 picoseconds.
		Weight::from_parts(101_746_697, 990)
			// Standard Error: 3_961
			.saturating_add(Weight::from_parts(5_137_942, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2543).saturating_mul(n.into()))
	}
	/// Storage: `Pov::BoundedValue` (r:1 w:0)
	/// Proof: `Pov::BoundedValue` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn storage_value_bounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `1518`
		// Minimum execution time: 2_859_000 picoseconds.
		Weight::from_parts(2_976_000, 1518)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::UnboundedValue` (r:1 w:0)
	/// Proof: `Pov::UnboundedValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn storage_value_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `1660`
		// Minimum execution time: 2_830_000 picoseconds.
		Weight::from_parts(2_967_000, 1660)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::UnboundedValue` (r:1 w:0)
	/// Proof: `Pov::UnboundedValue` (`max_values`: Some(1), `max_size`: None, mode: `Ignored`)
	fn storage_value_unbounded_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `0`
		// Minimum execution time: 2_896_000 picoseconds.
		Weight::from_parts(3_055_000, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::UnboundedValue` (r:1 w:0)
	/// Proof: `Pov::UnboundedValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Pov::BoundedValue` (r:1 w:0)
	/// Proof: `Pov::BoundedValue` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn storage_value_bounded_and_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213`
		//  Estimated: `1698`
		// Minimum execution time: 5_601_000 picoseconds.
		Weight::from_parts(5_854_000, 1698)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208 + l * (1 ±0)`
		//  Estimated: `1692 + l * (1 ±0)`
		// Minimum execution time: 4_063_000 picoseconds.
		Weight::from_parts(4_176_000, 1692)
			// Standard Error: 14
			.saturating_add(Weight::from_parts(1_331, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(l.into()))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208 + l * (1 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 3_993_000 picoseconds.
		Weight::from_parts(4_223_000, 4195793)
			// Standard Error: 14
			.saturating_add(Weight::from_parts(1_349, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237 + l * (2 ±0)`
		//  Estimated: `1721 + l * (2 ±0)`
		// Minimum execution time: 5_361_000 picoseconds.
		Weight::from_parts(5_613_000, 1721)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(1_747, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237 + l * (2 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 5_381_000 picoseconds.
		Weight::from_parts(5_610_000, 4195793)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(1_603, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237 + l * (2 ±0)`
		//  Estimated: `4195793 + l * (2 ±0)`
		// Minimum execution time: 5_495_000 picoseconds.
		Weight::from_parts(5_625_000, 4195793)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(1_653, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237 + l * (2 ±0)`
		//  Estimated: `4195793 + l * (2 ±0)`
		// Minimum execution time: 5_367_000 picoseconds.
		Weight::from_parts(5_776_000, 4195793)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(1_659, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Pov::UnboundedMap` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Pov::UnboundedMap2` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap2` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295 + i * (8 ±0)`
		//  Estimated: `3759 + i * (8 ±0)`
		// Minimum execution time: 9_012_000 picoseconds.
		Weight::from_parts(12_972_706, 3759)
			// Standard Error: 86
			.saturating_add(Weight::from_parts(4_687, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(i.into()))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Pov::UnboundedMap` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294 + i * (4 ±0)`
		//  Estimated: `3758 + i * (4 ±0)`
		// Minimum execution time: 9_112_000 picoseconds.
		Weight::from_parts(13_133_022, 3758)
			// Standard Error: 85
			.saturating_add(Weight::from_parts(2_513, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Pov::UnboundedMap` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap` (`max_values`: None, `max_size`: None, mode: `Ignored`)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294 + i * (4 ±0)`
		//  Estimated: `3501 + i * (4 ±0)`
		// Minimum execution time: 9_196_000 picoseconds.
		Weight::from_parts(13_113_133, 3501)
			// Standard Error: 87
			.saturating_add(Weight::from_parts(2_553, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_696_000 picoseconds.
		Weight::from_parts(4_919_000, 0)
	}
	fn noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_903_000 picoseconds.
		Weight::from_parts(2_029_000, 0)
	}
	/// Storage: `Pov::UnboundedMapTwox` (r:65001 w:0)
	/// Proof: `Pov::UnboundedMapTwox` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn storage_iteration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `17985355`
		//  Estimated: `178863820`
		// Minimum execution time: 312_695_626_000 picoseconds.
		Weight::from_parts(317_203_773_000, 178863820)
			.saturating_add(T::DbWeight::get().reads(65001_u64))
	}
	/// Storage: UNKNOWN KEY `0x6b657932` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0x6b657932` (r:0 w:1)
	/// The range of component `i` is `[0, 10]`.
	fn storage_root_is_the_same_every_time(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 410_000 picoseconds.
		Weight::from_parts(494_767, 0)
			// Standard Error: 229
			.saturating_add(Weight::from_parts(779, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `1489`
		// Minimum execution time: 4_142_000 picoseconds.
		Weight::from_parts(4_312_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Ignored`)
	fn storage_single_value_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `0`
		// Minimum execution time: 4_110_000 picoseconds.
		Weight::from_parts(4_327_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Pov::Value2` (r:1 w:0)
	/// Proof: `Pov::Value2` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `Ignored`)
	fn storage_single_value_ignored_some_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `226`
		//  Estimated: `1489`
		// Minimum execution time: 5_483_000 picoseconds.
		Weight::from_parts(5_774_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Pov::Value` (r:1 w:0)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_read_twice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `1489`
		// Minimum execution time: 4_598_000 picoseconds.
		Weight::from_parts(4_819_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Value` (r:0 w:1)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_write() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 412_000 picoseconds.
		Weight::from_parts(462_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Pov::Value` (r:0 w:1)
	/// Proof: `Pov::Value` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn storage_single_value_kill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 368_000 picoseconds.
		Weight::from_parts(417_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Measured`)
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1341`
		//  Estimated: `4806`
		// Minimum execution time: 17_335_000 picoseconds.
		Weight::from_parts(17_815_000, 4806)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Measured`)
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1544`
		//  Estimated: `5009`
		// Minimum execution time: 19_046_000 picoseconds.
		Weight::from_parts(19_481_000, 5009)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Measured`)
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2044`
		//  Estimated: `5509`
		// Minimum execution time: 16_637_000 picoseconds.
		Weight::from_parts(17_174_000, 5509)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:100 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Pov::Map16M` (r:100 w:0)
	/// Proof: `Pov::Map16M` (`max_values`: Some(16000000), `max_size`: Some(36), added: 3006, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `581 + m * (188 ±0) + n * (188 ±0)`
		//  Estimated: `990 + m * (2511 ±0) + n * (3006 ±0)`
		// Minimum execution time: 528_013_000 picoseconds.
		Weight::from_parts(319_136_331, 990)
			// Standard Error: 27_946
			.saturating_add(Weight::from_parts(2_484_286, 0).saturating_mul(n.into()))
			// Standard Error: 27_946
			.saturating_add(Weight::from_parts(2_489_473, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
	}
	/// Storage: `Pov::Map1M` (r:100 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `Ignored`)
	/// Storage: `Pov::Map16M` (r:100 w:0)
	/// Proof: `Pov::Map16M` (`max_values`: Some(16000000), `max_size`: Some(36), added: 3006, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component_one_ignored(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `581 + m * (188 ±0) + n * (188 ±0)`
		//  Estimated: `1751 + m * (189 ±0) + n * (3006 ±0)`
		// Minimum execution time: 520_932_000 picoseconds.
		Weight::from_parts(312_598_016, 1751)
			// Standard Error: 28_271
			.saturating_add(Weight::from_parts(2_547_790, 0).saturating_mul(n.into()))
			// Standard Error: 28_271
			.saturating_add(Weight::from_parts(2_529_866, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 189).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `236`
		//  Estimated: `3501`
		// Minimum execution time: 167_000 picoseconds.
		Weight::from_parts(5_026_685, 3501)
			// Standard Error: 1_455
			.saturating_add(Weight::from_parts(1_029_244, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::Map1M` (r:100 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213 + n * (40 ±0)`
		//  Estimated: `990 + n * (2511 ±0)`
		// Minimum execution time: 156_000 picoseconds.
		Weight::from_parts(2_643_015, 990)
			// Standard Error: 7_428
			.saturating_add(Weight::from_parts(12_968_946, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(n.into()))
	}
	/// Storage: `Pov::DoubleMap1M` (r:1024 w:0)
	/// Proof: `Pov::DoubleMap1M` (`max_values`: Some(1000000), `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 1024]`.
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `22004 + n * (57 ±0)`
		//  Estimated: `990 + n * (2543 ±0)`
		// Minimum execution time: 250_000 picoseconds.
		Weight::from_parts(101_746_697, 990)
			// Standard Error: 3_961
			.saturating_add(Weight::from_parts(5_137_942, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2543).saturating_mul(n.into()))
	}
	/// Storage: `Pov::BoundedValue` (r:1 w:0)
	/// Proof: `Pov::BoundedValue` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn storage_value_bounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `1518`
		// Minimum execution time: 2_859_000 picoseconds.
		Weight::from_parts(2_976_000, 1518)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::UnboundedValue` (r:1 w:0)
	/// Proof: `Pov::UnboundedValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn storage_value_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `1660`
		// Minimum execution time: 2_830_000 picoseconds.
		Weight::from_parts(2_967_000, 1660)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::UnboundedValue` (r:1 w:0)
	/// Proof: `Pov::UnboundedValue` (`max_values`: Some(1), `max_size`: None, mode: `Ignored`)
	fn storage_value_unbounded_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `0`
		// Minimum execution time: 2_896_000 picoseconds.
		Weight::from_parts(3_055_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::UnboundedValue` (r:1 w:0)
	/// Proof: `Pov::UnboundedValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Pov::BoundedValue` (r:1 w:0)
	/// Proof: `Pov::BoundedValue` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn storage_value_bounded_and_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213`
		//  Estimated: `1698`
		// Minimum execution time: 5_601_000 picoseconds.
		Weight::from_parts(5_854_000, 1698)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208 + l * (1 ±0)`
		//  Estimated: `1692 + l * (1 ±0)`
		// Minimum execution time: 4_063_000 picoseconds.
		Weight::from_parts(4_176_000, 1692)
			// Standard Error: 14
			.saturating_add(Weight::from_parts(1_331, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(l.into()))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208 + l * (1 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 3_993_000 picoseconds.
		Weight::from_parts(4_223_000, 4195793)
			// Standard Error: 14
			.saturating_add(Weight::from_parts(1_349, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237 + l * (2 ±0)`
		//  Estimated: `1721 + l * (2 ±0)`
		// Minimum execution time: 5_361_000 picoseconds.
		Weight::from_parts(5_613_000, 1721)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(1_747, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237 + l * (2 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 5_381_000 picoseconds.
		Weight::from_parts(5_610_000, 4195793)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(1_603, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237 + l * (2 ±0)`
		//  Estimated: `4195793 + l * (2 ±0)`
		// Minimum execution time: 5_495_000 picoseconds.
		Weight::from_parts(5_625_000, 4195793)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(1_653, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Pov::LargeValue` (r:1 w:0)
	/// Proof: `Pov::LargeValue` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `Measured`)
	/// Storage: `Pov::LargeValue2` (r:1 w:0)
	/// Proof: `Pov::LargeValue2` (`max_values`: Some(1), `max_size`: Some(4194308), added: 4194803, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237 + l * (2 ±0)`
		//  Estimated: `4195793 + l * (2 ±0)`
		// Minimum execution time: 5_367_000 picoseconds.
		Weight::from_parts(5_776_000, 4195793)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(1_659, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Pov::UnboundedMap` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Pov::UnboundedMap2` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap2` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295 + i * (8 ±0)`
		//  Estimated: `3759 + i * (8 ±0)`
		// Minimum execution time: 9_012_000 picoseconds.
		Weight::from_parts(12_972_706, 3759)
			// Standard Error: 86
			.saturating_add(Weight::from_parts(4_687, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(i.into()))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Pov::UnboundedMap` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294 + i * (4 ±0)`
		//  Estimated: `3758 + i * (4 ±0)`
		// Minimum execution time: 9_112_000 picoseconds.
		Weight::from_parts(13_133_022, 3758)
			// Standard Error: 85
			.saturating_add(Weight::from_parts(2_513, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	/// Storage: `Pov::Map1M` (r:1 w:0)
	/// Proof: `Pov::Map1M` (`max_values`: Some(1000000), `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Pov::UnboundedMap` (r:1 w:0)
	/// Proof: `Pov::UnboundedMap` (`max_values`: None, `max_size`: None, mode: `Ignored`)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294 + i * (4 ±0)`
		//  Estimated: `3501 + i * (4 ±0)`
		// Minimum execution time: 9_196_000 picoseconds.
		Weight::from_parts(13_113_133, 3501)
			// Standard Error: 87
			.saturating_add(Weight::from_parts(2_553, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_696_000 picoseconds.
		Weight::from_parts(4_919_000, 0)
	}
	fn noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_903_000 picoseconds.
		Weight::from_parts(2_029_000, 0)
	}
	/// Storage: `Pov::UnboundedMapTwox` (r:65001 w:0)
	/// Proof: `Pov::UnboundedMapTwox` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn storage_iteration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `17985355`
		//  Estimated: `178863820`
		// Minimum execution time: 312_695_626_000 picoseconds.
		Weight::from_parts(317_203_773_000, 178863820)
			.saturating_add(RocksDbWeight::get().reads(65001_u64))
	}
	/// Storage: UNKNOWN KEY `0x6b657932` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0x6b657932` (r:0 w:1)
	/// The range of component `i` is `[0, 10]`.
	fn storage_root_is_the_same_every_time(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 410_000 picoseconds.
		Weight::from_parts(494_767, 0)
			// Standard Error: 229
			.saturating_add(Weight::from_parts(779, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
