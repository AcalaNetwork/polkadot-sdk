[package]
name = "sc-service"
version = "0.35.0"
authors.workspace = true
edition.workspace = true
license = "GPL-3.0-or-later WITH Classpath-exception-2.0"
homepage.workspace = true
repository.workspace = true
description = "Substrate service. Starts a thread that spins up the network, client, and extrinsic pool. Manages communication between them."
readme = "README.md"

[lints]
workspace = true

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[features]
default = ["rocksdb"]
# The RocksDB feature activates the RocksDB database backend. If it is not activated, and you pass
# a path to a database, an error will be produced at runtime.
rocksdb = ["sc-client-db/rocksdb"]
# exposes the client type
test-helpers = []
runtime-benchmarks = [
	"sc-client-db/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"sc-client-api/runtime-benchmarks",
	"sc-chain-spec/runtime-benchmarks",
	"sc-consensus/runtime-benchmarks",
	"sc-executor/runtime-benchmarks",
	"sc-informant/runtime-benchmarks",
	"sc-network/runtime-benchmarks",
	"sc-network-common/runtime-benchmarks",
	"sc-network-light/runtime-benchmarks",
	"sc-network-sync/runtime-benchmarks",
	"sc-network-transactions/runtime-benchmarks",
	"sc-rpc/runtime-benchmarks",
	"sc-rpc-spec-v2/runtime-benchmarks",
	"sc-sysinfo/runtime-benchmarks",
	"sc-tracing/runtime-benchmarks",
	"sc-transaction-pool/runtime-benchmarks",
	"sc-transaction-pool-api/runtime-benchmarks",
	"sp-api/runtime-benchmarks",
	"sp-blockchain/runtime-benchmarks",
	"sp-consensus/runtime-benchmarks",
	"sp-session/runtime-benchmarks",
	"sp-state-machine/runtime-benchmarks",
	"sp-transaction-pool/runtime-benchmarks",
	"sp-transaction-storage-proof/runtime-benchmarks",
	"sp-trie/runtime-benchmarks",
	"sp-version/runtime-benchmarks",
	"substrate-test-runtime/runtime-benchmarks",
	"substrate-test-runtime-client/runtime-benchmarks",
	"sc-telemetry/runtime-benchmarks",
	"sp-core/runtime-benchmarks",
	"sc-keystore/runtime-benchmarks",
	"sp-keystore/runtime-benchmarks"
]
try-runtime = [
	"sc-client-api/try-runtime",
	"sc-chain-spec/try-runtime",
	"sc-consensus/try-runtime",
	"sc-client-db/try-runtime",
	"sc-executor/try-runtime",
	"sc-informant/try-runtime",
	"sc-network/try-runtime",
	"sc-network-common/try-runtime",
	"sc-network-light/try-runtime",
	"sc-network-sync/try-runtime",
	"sc-network-transactions/try-runtime",
	"sc-rpc/try-runtime",
	"sc-rpc-spec-v2/try-runtime",
	"sc-sysinfo/try-runtime",
	"sc-tracing/try-runtime",
	"sc-transaction-pool/try-runtime",
	"sc-transaction-pool-api/try-runtime",
	"sp-api/try-runtime",
	"sp-blockchain/try-runtime",
	"sp-consensus/try-runtime",
	"sp-runtime/try-runtime",
	"sp-session/try-runtime",
	"sp-state-machine/try-runtime",
	"sp-transaction-pool/try-runtime",
	"sp-transaction-storage-proof/try-runtime",
	"sp-trie/try-runtime",
	"sp-version/try-runtime",
	"substrate-test-runtime/try-runtime",
	"substrate-test-runtime-client/try-runtime",
	"sc-telemetry/try-runtime",
	"sp-core/try-runtime",
	"sc-keystore/try-runtime",
	"sp-keystore/try-runtime"
]
std = [
	"sc-client-api/std",
	"sc-chain-spec/std",
	"sc-consensus/std",
	"sc-client-db/std",
	"sc-informant/std",
	"sc-keystore/std",
	"sc-network/std",
	"sc-network-common/std",
	"sc-network-light/std",
	"sc-network-sync/std",
	"sc-network-transactions/std",
	"sc-network-types/std",
	"sc-rpc/std",
	"sc-rpc-server/std",
	"sc-rpc-spec-v2/std",
	"sc-sysinfo/std",
	"sc-telemetry/std",
	"sc-tracing/std",
	"sc-transaction-pool/std",
	"sc-transaction-pool-api/std",
	"sc-utils/std",
	"sp-blockchain/std",
	"sp-consensus/std",
	"substrate-test-runtime-client/std",
	"prometheus-endpoint/std",
	"log/std"
]

[dependencies]
jsonrpsee = { features = ["server"], workspace = true }
thiserror = { workspace = true }
futures = { workspace = true }
rand = { workspace = true, default-features = true }
parking_lot = { workspace = true, default-features = true }
log = { workspace = true, default-features = true }
futures-timer = { workspace = true }
exit-future = { workspace = true }
pin-project = { workspace = true }
serde = { workspace = true, default-features = true }
serde_json = { workspace = true, default-features = true }
sc-keystore = { workspace = true, default-features = true }
sp-runtime = { workspace = true, default-features = true }
sp-trie = { workspace = true, default-features = true }
sp-externalities = { workspace = true, default-features = true }
sc-utils = { workspace = true, default-features = true }
sp-version = { workspace = true, default-features = true }
sp-blockchain = { workspace = true, default-features = true }
sp-core = { workspace = true, default-features = true }
sp-keystore = { workspace = true, default-features = true }
sp-session = { workspace = true, default-features = true }
sp-state-machine = { workspace = true, default-features = true }
sp-consensus = { workspace = true, default-features = true }
sc-consensus = { workspace = true, default-features = true }
sp-storage = { workspace = true, default-features = true }
sc-network = { workspace = true, default-features = true }
sc-network-common = { workspace = true, default-features = true }
sc-network-light = { workspace = true, default-features = true }
sc-network-sync = { workspace = true, default-features = true }
sc-network-types = { workspace = true, default-features = true }
sc-network-transactions = { workspace = true, default-features = true }
sc-chain-spec = { workspace = true, default-features = true }
sc-client-api = { workspace = true, default-features = true }
sp-api = { workspace = true, default-features = true }
sc-client-db = { workspace = true }
codec = { workspace = true, default-features = true }
sc-executor = { workspace = true, default-features = true }
sc-transaction-pool = { workspace = true, default-features = true }
sp-transaction-pool = { workspace = true, default-features = true }
sc-transaction-pool-api = { workspace = true, default-features = true }
sp-transaction-storage-proof = { workspace = true, default-features = true }
sc-rpc-server = { workspace = true, default-features = true }
sc-rpc = { workspace = true, default-features = true }
sc-rpc-spec-v2 = { workspace = true, default-features = true }
sc-informant = { workspace = true, default-features = true }
sc-telemetry = { workspace = true, default-features = true }
prometheus-endpoint = { workspace = true, default-features = true }
sc-tracing = { workspace = true, default-features = true }
sc-sysinfo = { workspace = true, default-features = true }
tracing = { workspace = true, default-features = true }
tracing-futures = { workspace = true }
async-trait = { workspace = true }
tokio = { features = ["parking_lot", "rt-multi-thread", "time"], workspace = true, default-features = true }
tempfile = { workspace = true }
directories = { workspace = true }
static_init = { workspace = true }
schnellru = { workspace = true }

[dev-dependencies]
substrate-test-runtime-client = { workspace = true }
substrate-test-runtime = { workspace = true }
