[package]
description = "Integration tests for Substrate network protocol"
name = "sc-network-test"
version = "0.8.0"
license = "GPL-3.0-or-later WITH Classpath-exception-2.0"
authors.workspace = true
edition.workspace = true
publish = false
homepage.workspace = true
repository.workspace = true

[lints]
workspace = true

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
tokio = { workspace = true, default-features = true }
async-trait = { workspace = true }
futures = { workspace = true }
futures-timer = { workspace = true }
libp2p = { workspace = true }
log = { workspace = true, default-features = true }
parking_lot = { workspace = true, default-features = true }
rand = { workspace = true, default-features = true }
sc-block-builder = { workspace = true, default-features = true }
sc-client-api = { workspace = true, default-features = true }
sc-consensus = { workspace = true, default-features = true }
sc-network = { workspace = true, default-features = true }
sc-network-common = { workspace = true, default-features = true }
sc-network-types = { workspace = true, default-features = true }
sc-utils = { workspace = true, default-features = true }
sc-network-light = { workspace = true, default-features = true }
sc-network-sync = { workspace = true, default-features = true }
sc-service = { features = ["test-helpers"], workspace = true }
sp-blockchain = { workspace = true, default-features = true }
sp-consensus = { workspace = true, default-features = true }
sp-core = { workspace = true, default-features = true }
sp-runtime = { workspace = true, default-features = true }
sp-tracing = { workspace = true, default-features = true }
substrate-test-runtime = { workspace = true }
substrate-test-runtime-client = { workspace = true }

[features]
try-runtime = [
	"sc-client-api/try-runtime",
	"sc-block-builder/try-runtime",
	"sc-consensus/try-runtime",
	"sc-network/try-runtime",
	"sc-network-common/try-runtime",
	"sc-network-light/try-runtime",
	"sc-network-sync/try-runtime",
	"sc-service/try-runtime",
	"sp-blockchain/try-runtime",
	"sp-consensus/try-runtime",
	"sp-runtime/try-runtime",
	"substrate-test-runtime/try-runtime",
	"substrate-test-runtime-client/try-runtime",
	"sp-core/try-runtime"
]
runtime-benchmarks = [
	"sc-client-api/runtime-benchmarks",
	"sc-block-builder/runtime-benchmarks",
	"sc-consensus/runtime-benchmarks",
	"sc-network/runtime-benchmarks",
	"sc-network-common/runtime-benchmarks",
	"sc-network-light/runtime-benchmarks",
	"sc-network-sync/runtime-benchmarks",
	"sc-service/runtime-benchmarks",
	"sp-blockchain/runtime-benchmarks",
	"sp-consensus/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"substrate-test-runtime/runtime-benchmarks",
	"substrate-test-runtime-client/runtime-benchmarks",
	"sp-core/runtime-benchmarks"
]
std = [
	"sc-client-api/std",
	"sc-block-builder/std",
	"sc-consensus/std",
	"sc-network/std",
	"sc-network-common/std",
	"sc-network-light/std",
	"sc-network-sync/std",
	"sc-network-types/std",
	"sc-service/std",
	"sc-utils/std",
	"sp-blockchain/std",
	"sp-consensus/std",
	"substrate-test-runtime-client/std",
	"log/std"
]
