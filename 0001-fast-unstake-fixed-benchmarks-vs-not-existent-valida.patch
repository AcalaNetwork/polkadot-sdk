From 8ea19cae811bb37beb6c6a3500cd3804020bac19 Mon Sep 17 00:00:00 2001
From: Paolo La Camera <paolo@parity.io>
Date: Thu, 26 Jun 2025 09:43:28 +0000
Subject: [PATCH 1/5] fast-unstake: fixed benchmarks vs not-existent validator

The benchmarks were failing because they were trying to nominate to
accounts that weren't properly registered validators. The PR #8436
correctly added validation to prevent this (fixing a silent failure),
but this broke benchmarks that had invalid setups.

Rather than create complex validator setups, we simply removed
nomination from the benchmarks entirely - which is actually more
realistic for fast-unstake usage patterns: fast-unstake is designed for
accounts that are bonded but **not actively nominating**
---
 substrate/frame/fast-unstake/src/benchmarking.rs | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/substrate/frame/fast-unstake/src/benchmarking.rs b/substrate/frame/fast-unstake/src/benchmarking.rs
index 312a02cc93..a42db7fdb1 100644
--- a/substrate/frame/fast-unstake/src/benchmarking.rs
+++ b/substrate/frame/fast-unstake/src/benchmarking.rs
@@ -20,7 +20,7 @@
 #![cfg(feature = "runtime-benchmarks")]
 
 use crate::{types::*, *};
-use alloc::{vec, vec::Vec};
+use alloc::vec::Vec;
 use frame_benchmarking::v2::*;
 use frame_support::{
 	assert_ok,
@@ -49,9 +49,12 @@ fn fund_and_bond_account<T: Config>(account: &T::AccountId) {
 	let stake = CurrencyOf::<T>::minimum_balance() * 100u32.into();
 	CurrencyOf::<T>::make_free_balance_be(&account, stake * 10u32.into());
 
-	// bond and nominate ourselves, this will guarantee that we are not backing anyone.
+	// bond without nominating - fast-unstake works with non-nominating bonded accounts.
+	// Note that if we want to nominate a validator, we must first create a valid one; otherwise,
+	// `nominate()` will fail with a BadTarget error. However, fast-unstaking is intended for
+	// accounts that are bonded but not actively nominating, making this an unnecessary complication
+	// for our needs.
 	assert_ok!(T::Staking::bond(account, stake, account));
-	assert_ok!(T::Staking::nominate(account, vec![account.clone()]));
 }
 
 pub(crate) fn fast_unstake_events<T: Config>() -> Vec<crate::Event<T>> {
-- 
2.50.0

