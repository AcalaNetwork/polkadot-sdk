[package]
name = "parachain-omni-node"
description = "A parachain omni node, built with Substrate and Cumulus, part of Polkadot Sdk."
version = "0.0.0"
license = "MIT-0"
authors.workspace = true
homepage.workspace = true
repository.workspace = true
edition.workspace = true
publish = false
build = "build.rs"

[lints]
workspace = true

# [[bin]]
# name = "parachain-template-node"

[dependencies]
clap = { version = "4.5.3", features = ["derive"] }
log = { workspace = true, default-features = true }
codec = { package = "parity-scale-codec", version = "3.0.0" }
serde = { features = ["derive"], workspace = true, default-features = true }
jsonrpsee = { version = "0.22", features = ["server"] }
futures = "0.3.28"
serde_json = { workspace = true, default-features = true }

# Substrate
sc-basic-authorship = { path = "../../substrate/client/basic-authorship" }
sc-chain-spec = { path = "../../substrate/client/chain-spec" }
sc-cli = { path = "../../substrate/client/cli" }
sc-client-api = { path = "../../substrate/client/api" }
sc-offchain = { path = "../../substrate/client/offchain" }
sc-consensus = { path = "../../substrate/client/consensus/common" }
sc-executor = { path = "../../substrate/client/executor" }
sc-network = { path = "../../substrate/client/network" }
sc-network-sync = { path = "../../substrate/client/network/sync" }
sc-rpc = { path = "../../substrate/client/rpc" }
sc-service = { path = "../../substrate/client/service" }
sc-sysinfo = { path = "../../substrate/client/sysinfo" }
sc-telemetry = { path = "../../substrate/client/telemetry" }
sc-tracing = { path = "../../substrate/client/tracing" }
sc-transaction-pool = { path = "../../substrate/client/transaction-pool" }
sc-transaction-pool-api = { path = "../../substrate/client/transaction-pool/api" }
sc-consensus-aura = { path = "../../substrate/client/consensus/aura" }
sc-consensus-babe = { path = "../../substrate/client/consensus/babe" }
sc-consensus-grandpa = { path = "../../substrate/client/consensus/grandpa" }

sp-api = { path = "../../substrate/primitives/api" }
sp-block-builder = { path = "../../substrate/primitives/block-builder" }
sp-blockchain = { path = "../../substrate/primitives/blockchain" }
sp-consensus-aura = { path = "../../substrate/primitives/consensus/aura" }
sp-core = { path = "../../substrate/primitives/core" }
sp-keystore = { path = "../../substrate/primitives/keystore" }
sp-io = { path = "../../substrate/primitives/io" }
sp-runtime = { path = "../../substrate/primitives/runtime" }
sp-timestamp = { path = "../../substrate/primitives/timestamp" }

pallet-transaction-payment-rpc = { path = "../../substrate/frame/transaction-payment/rpc" }
frame = { path = "../../substrate/frame", features = [
	"experimental",
	"runtime",
] }

substrate-frame-rpc-system = { path = "../../substrate/utils/frame/rpc/system" }
substrate-prometheus-endpoint = { path = "../../substrate/utils/prometheus" }

# Polkadot
polkadot-cli = { path = "../../polkadot/cli" }
polkadot-primitives = { path = "../../polkadot/primitives" }
xcm = { package = "staging-xcm", path = "../../polkadot/xcm", default-features = false }

# Cumulus
cumulus-client-cli = { path = "../../cumulus/client/cli" }
cumulus-client-collator = { path = "../../cumulus/client/collator" }
cumulus-client-consensus-aura = { path = "../../cumulus/client/consensus/aura" }
cumulus-client-consensus-common = { path = "../../cumulus/client/consensus/common" }
cumulus-client-consensus-proposer = { path = "../../cumulus/client/consensus/proposer" }
cumulus-client-service = { path = "../../cumulus/client/service" }
cumulus-primitives-core = { path = "../../cumulus/primitives/core" }
cumulus-primitives-parachain-inherent = { path = "../../cumulus/primitives/parachain-inherent" }
cumulus-relay-chain-interface = { path = "../../cumulus/client/relay-chain-interface" }
color-print = "0.3.4"

# Local
omni-node-common = { path = "../common" }

[build-dependencies]
substrate-build-script-utils = { path = "../../substrate/utils/build-script-utils" }

[features]
default = []
